// This test template tests the functionality of SDK extensions helper, using the sdk extensions
// data provided in the gen-template.json

------------------- Clusters -------------------
// cluster: 0x0003 Identify, text extension: ''
// cluster: 0x0004 Groups, text extension: ''
// cluster: 0x0005 Scenes, text extension: ''
// cluster: 0x0006 On/Off, text extension: ''
// cluster: 0x0007 On/off Switch Configuration, text extension: ''
// cluster: 0x0008 Level Control, text extension: ''
// cluster: 0x000F Binary Input (Basic), text extension: ''
// cluster: 0x001C Pulse Width Modulation, text extension: ''
// cluster: 0x001D Descriptor, text extension: ''
// cluster: 0x001E Binding, text extension: ''
// cluster: 0x001F Access Control, text extension: ''
// cluster: 0x0025 Actions, text extension: ''
// cluster: 0x0028 Basic, text extension: ''
// cluster: 0x0029 OTA Software Update Provider, text extension: ''
// cluster: 0x002A OTA Software Update Requestor, text extension: ''
// cluster: 0x002B Localization Configuration, text extension: ''
// cluster: 0x002C Time Format Localization, text extension: ''
// cluster: 0x002D Unit Localization, text extension: ''
// cluster: 0x002E Power Source Configuration, text extension: ''
// cluster: 0x002F Power Source, text extension: ''
// cluster: 0x0030 General Commissioning, text extension: ''
// cluster: 0x0031 Network Commissioning, text extension: ''
// cluster: 0x0032 Diagnostic Logs, text extension: ''
// cluster: 0x0033 General Diagnostics, text extension: ''
// cluster: 0x0034 Software Diagnostics, text extension: ''
// cluster: 0x0035 Thread Network Diagnostics, text extension: ''
// cluster: 0x0036 WiFi Network Diagnostics, text extension: ''
// cluster: 0x0037 Ethernet Network Diagnostics, text extension: ''
// cluster: 0x0038 Time Synchronization, text extension: ''
// cluster: 0x0039 Bridged Device Basic, text extension: ''
// cluster: 0x003B Switch, text extension: ''
// cluster: 0x003C AdministratorCommissioning, text extension: ''
// cluster: 0x003E Operational Credentials, text extension: ''
// cluster: 0x003F Group Key Management, text extension: ''
// cluster: 0x0040 Fixed Label, text extension: ''
// cluster: 0x0041 User Label, text extension: ''
// cluster: 0x0042 Proxy Configuration, text extension: ''
// cluster: 0x0043 Proxy Discovery, text extension: ''
// cluster: 0x0044 Proxy Valid, text extension: ''
// cluster: 0x0045 Boolean State, text extension: ''
// cluster: 0x0050 Mode Select, text extension: ''
// cluster: 0x0101 Door Lock, text extension: ''
// cluster: 0x0102 Window Covering, text extension: ''
// cluster: 0x0103 Barrier Control, text extension: ''
// cluster: 0x0200 Pump Configuration and Control, text extension: ''
// cluster: 0x0201 Thermostat, text extension: ''
// cluster: 0x0202 Fan Control, text extension: ''
// cluster: 0x0204 Thermostat User Interface Configuration, text extension: ''
// cluster: 0x0300 Color Control, text extension: ''
// cluster: 0x0301 Ballast Configuration, text extension: ''
// cluster: 0x0400 Illuminance Measurement, text extension: ''
// cluster: 0x0402 Temperature Measurement, text extension: ''
// cluster: 0x0403 Pressure Measurement, text extension: ''
// cluster: 0x0404 Flow Measurement, text extension: ''
// cluster: 0x0405 Relative Humidity Measurement, text extension: ''
// cluster: 0x0406 Occupancy Sensing, text extension: ''
// cluster: 0x0503 Wake on LAN, text extension: ''
// cluster: 0x0504 Channel, text extension: ''
// cluster: 0x0505 Target Navigator, text extension: ''
// cluster: 0x0506 Media Playback, text extension: ''
// cluster: 0x0507 Media Input, text extension: ''
// cluster: 0x0508 Low Power, text extension: ''
// cluster: 0x0509 Keypad Input, text extension: ''
// cluster: 0x050A Content Launcher, text extension: ''
// cluster: 0x050B Audio Output, text extension: ''
// cluster: 0x050C Application Launcher, text extension: ''
// cluster: 0x050D Application Basic, text extension: ''
// cluster: 0x050E Account Login, text extension: ''
// cluster: 0x0B04 Electrical Measurement, text extension: ''
// cluster: 0x1046 Client Monitoring, text extension: ''
// cluster: 0xFFF1FC05 Unit Testing, text extension: ''
// cluster: 0xFFF1FC06 Fault Injection, text extension: ''

------------------- By-role Clusters -------------------
// server cluster: 0x0003 Identify, text extension: ''
// client cluster: 0x0003 Identify, text extension: ''
// server cluster: 0x0004 Groups, text extension: ''
// client cluster: 0x0004 Groups, text extension: ''
// server cluster: 0x0005 Scenes, text extension: ''
// client cluster: 0x0005 Scenes, text extension: ''
// server cluster: 0x0006 On/Off, text extension: ''
// client cluster: 0x0006 On/Off, text extension: ''
// server cluster: 0x0007 On/off Switch Configuration, text extension: ''
// client cluster: 0x0007 On/off Switch Configuration, text extension: ''
// server cluster: 0x0008 Level Control, text extension: ''
// client cluster: 0x0008 Level Control, text extension: ''
// server cluster: 0x000F Binary Input (Basic), text extension: ''
// client cluster: 0x000F Binary Input (Basic), text extension: ''
// server cluster: 0x001C Pulse Width Modulation, text extension: ''
// client cluster: 0x001C Pulse Width Modulation, text extension: ''
// server cluster: 0x001D Descriptor, text extension: ''
// client cluster: 0x001D Descriptor, text extension: ''
// server cluster: 0x001E Binding, text extension: ''
// client cluster: 0x001E Binding, text extension: ''
// server cluster: 0x001F Access Control, text extension: ''
// client cluster: 0x001F Access Control, text extension: ''
// server cluster: 0x0025 Actions, text extension: ''
// client cluster: 0x0025 Actions, text extension: ''
// server cluster: 0x0028 Basic, text extension: ''
// client cluster: 0x0028 Basic, text extension: ''
// server cluster: 0x0029 OTA Software Update Provider, text extension: ''
// client cluster: 0x0029 OTA Software Update Provider, text extension: ''
// server cluster: 0x002A OTA Software Update Requestor, text extension: ''
// client cluster: 0x002A OTA Software Update Requestor, text extension: ''
// server cluster: 0x002B Localization Configuration, text extension: ''
// client cluster: 0x002B Localization Configuration, text extension: ''
// server cluster: 0x002C Time Format Localization, text extension: ''
// client cluster: 0x002C Time Format Localization, text extension: ''
// server cluster: 0x002D Unit Localization, text extension: ''
// client cluster: 0x002D Unit Localization, text extension: ''
// server cluster: 0x002E Power Source Configuration, text extension: ''
// client cluster: 0x002E Power Source Configuration, text extension: ''
// server cluster: 0x002F Power Source, text extension: ''
// client cluster: 0x002F Power Source, text extension: ''
// server cluster: 0x0030 General Commissioning, text extension: ''
// client cluster: 0x0030 General Commissioning, text extension: ''
// server cluster: 0x0031 Network Commissioning, text extension: ''
// client cluster: 0x0031 Network Commissioning, text extension: ''
// server cluster: 0x0032 Diagnostic Logs, text extension: ''
// client cluster: 0x0032 Diagnostic Logs, text extension: ''
// server cluster: 0x0033 General Diagnostics, text extension: ''
// client cluster: 0x0033 General Diagnostics, text extension: ''
// server cluster: 0x0034 Software Diagnostics, text extension: ''
// client cluster: 0x0034 Software Diagnostics, text extension: ''
// server cluster: 0x0035 Thread Network Diagnostics, text extension: ''
// client cluster: 0x0035 Thread Network Diagnostics, text extension: ''
// server cluster: 0x0036 WiFi Network Diagnostics, text extension: ''
// client cluster: 0x0036 WiFi Network Diagnostics, text extension: ''
// server cluster: 0x0037 Ethernet Network Diagnostics, text extension: ''
// client cluster: 0x0037 Ethernet Network Diagnostics, text extension: ''
// server cluster: 0x0038 Time Synchronization, text extension: ''
// client cluster: 0x0038 Time Synchronization, text extension: ''
// server cluster: 0x0039 Bridged Device Basic, text extension: ''
// client cluster: 0x0039 Bridged Device Basic, text extension: ''
// server cluster: 0x003B Switch, text extension: ''
// client cluster: 0x003B Switch, text extension: ''
// server cluster: 0x003C AdministratorCommissioning, text extension: ''
// client cluster: 0x003C AdministratorCommissioning, text extension: ''
// server cluster: 0x003E Operational Credentials, text extension: ''
// client cluster: 0x003E Operational Credentials, text extension: ''
// server cluster: 0x003F Group Key Management, text extension: ''
// client cluster: 0x003F Group Key Management, text extension: ''
// server cluster: 0x0040 Fixed Label, text extension: ''
// client cluster: 0x0040 Fixed Label, text extension: ''
// server cluster: 0x0041 User Label, text extension: ''
// client cluster: 0x0041 User Label, text extension: ''
// server cluster: 0x0042 Proxy Configuration, text extension: ''
// client cluster: 0x0042 Proxy Configuration, text extension: ''
// server cluster: 0x0043 Proxy Discovery, text extension: ''
// client cluster: 0x0043 Proxy Discovery, text extension: ''
// server cluster: 0x0044 Proxy Valid, text extension: ''
// client cluster: 0x0044 Proxy Valid, text extension: ''
// server cluster: 0x0045 Boolean State, text extension: ''
// client cluster: 0x0045 Boolean State, text extension: ''
// server cluster: 0x0050 Mode Select, text extension: ''
// client cluster: 0x0050 Mode Select, text extension: ''
// server cluster: 0x0101 Door Lock, text extension: ''
// client cluster: 0x0101 Door Lock, text extension: ''
// server cluster: 0x0102 Window Covering, text extension: ''
// client cluster: 0x0102 Window Covering, text extension: ''
// server cluster: 0x0103 Barrier Control, text extension: ''
// client cluster: 0x0103 Barrier Control, text extension: ''
// server cluster: 0x0200 Pump Configuration and Control, text extension: ''
// client cluster: 0x0200 Pump Configuration and Control, text extension: ''
// server cluster: 0x0201 Thermostat, text extension: ''
// client cluster: 0x0201 Thermostat, text extension: ''
// server cluster: 0x0202 Fan Control, text extension: ''
// client cluster: 0x0202 Fan Control, text extension: ''
// server cluster: 0x0204 Thermostat User Interface Configuration, text extension: ''
// client cluster: 0x0204 Thermostat User Interface Configuration, text extension: ''
// server cluster: 0x0300 Color Control, text extension: ''
// client cluster: 0x0300 Color Control, text extension: ''
// server cluster: 0x0301 Ballast Configuration, text extension: ''
// client cluster: 0x0301 Ballast Configuration, text extension: ''
// server cluster: 0x0400 Illuminance Measurement, text extension: ''
// client cluster: 0x0400 Illuminance Measurement, text extension: ''
// server cluster: 0x0402 Temperature Measurement, text extension: ''
// client cluster: 0x0402 Temperature Measurement, text extension: ''
// server cluster: 0x0403 Pressure Measurement, text extension: ''
// client cluster: 0x0403 Pressure Measurement, text extension: ''
// server cluster: 0x0404 Flow Measurement, text extension: ''
// client cluster: 0x0404 Flow Measurement, text extension: ''
// server cluster: 0x0405 Relative Humidity Measurement, text extension: ''
// client cluster: 0x0405 Relative Humidity Measurement, text extension: ''
// server cluster: 0x0406 Occupancy Sensing, text extension: ''
// client cluster: 0x0406 Occupancy Sensing, text extension: ''
// server cluster: 0x0503 Wake on LAN, text extension: ''
// client cluster: 0x0503 Wake on LAN, text extension: ''
// server cluster: 0x0504 Channel, text extension: ''
// client cluster: 0x0504 Channel, text extension: ''
// server cluster: 0x0505 Target Navigator, text extension: ''
// client cluster: 0x0505 Target Navigator, text extension: ''
// server cluster: 0x0506 Media Playback, text extension: ''
// client cluster: 0x0506 Media Playback, text extension: ''
// server cluster: 0x0507 Media Input, text extension: ''
// client cluster: 0x0507 Media Input, text extension: ''
// server cluster: 0x0508 Low Power, text extension: ''
// client cluster: 0x0508 Low Power, text extension: ''
// server cluster: 0x0509 Keypad Input, text extension: ''
// client cluster: 0x0509 Keypad Input, text extension: ''
// server cluster: 0x050A Content Launcher, text extension: ''
// client cluster: 0x050A Content Launcher, text extension: ''
// server cluster: 0x050B Audio Output, text extension: ''
// client cluster: 0x050B Audio Output, text extension: ''
// server cluster: 0x050C Application Launcher, text extension: ''
// client cluster: 0x050C Application Launcher, text extension: ''
// server cluster: 0x050D Application Basic, text extension: ''
// client cluster: 0x050D Application Basic, text extension: ''
// server cluster: 0x050E Account Login, text extension: ''
// client cluster: 0x050E Account Login, text extension: ''
// server cluster: 0x0B04 Electrical Measurement, text extension: ''
// client cluster: 0x0B04 Electrical Measurement, text extension: ''
// server cluster: 0x1046 Client Monitoring, text extension: ''
// client cluster: 0x1046 Client Monitoring, text extension: ''
// server cluster: 0xFFF1FC05 Unit Testing, text extension: ''
// client cluster: 0xFFF1FC05 Unit Testing, text extension: ''
// server cluster: 0xFFF1FC06 Fault Injection, text extension: ''
// client cluster: 0xFFF1FC06 Fault Injection, text extension: ''

------------------- Commands -------------------
// command: null / 0x00 => ReadAttributes, test extension: ''
// command: null / 0x01 => ReadAttributesResponse, test extension: ''
// command: null / 0x02 => WriteAttributes, test extension: ''
// command: null / 0x03 => WriteAttributesUndivided, test extension: ''
// command: null / 0x04 => WriteAttributesResponse, test extension: ''
// command: null / 0x05 => WriteAttributesNoResponse, test extension: ''
// command: null / 0x0B => DefaultResponse, test extension: ''
// command: null / 0x0E => ReadAttributesStructured, test extension: ''
// command: null / 0x0F => WriteAttributesStructured, test extension: ''
// command: null / 0x10 => WriteAttributesStructuredResponse, test extension: ''
// command: 0x0003 / 0x00 => Identify, test extension: ''
// command: 0x0003 / 0x40 => TriggerEffect, test extension: ''
// command: 0x0004 / 0x00 => AddGroup, test extension: ''
// command: 0x0004 / 0x00 => AddGroupResponse, test extension: ''
// command: 0x0004 / 0x00 => AddGroup, test extension: ''
// command: 0x0004 / 0x00 => AddGroupResponse, test extension: ''
// command: 0x0004 / 0x01 => ViewGroup, test extension: ''
// command: 0x0004 / 0x01 => ViewGroupResponse, test extension: ''
// command: 0x0004 / 0x02 => GetGroupMembership, test extension: ''
// command: 0x0004 / 0x02 => GetGroupMembershipResponse, test extension: ''
// command: 0x0004 / 0x03 => RemoveGroup, test extension: ''
// command: 0x0004 / 0x03 => RemoveGroupResponse, test extension: ''
// command: 0x0004 / 0x04 => RemoveAllGroups, test extension: ''
// command: 0x0004 / 0x05 => AddGroupIfIdentifying, test extension: ''
// command: 0x0005 / 0x00 => AddScene, test extension: ''
// command: 0x0005 / 0x00 => AddSceneResponse, test extension: ''
// command: 0x0005 / 0x00 => AddScene, test extension: ''
// command: 0x0005 / 0x00 => AddSceneResponse, test extension: ''
// command: 0x0005 / 0x00 => AddScene, test extension: ''
// command: 0x0005 / 0x00 => AddSceneResponse, test extension: ''
// command: 0x0005 / 0x00 => AddScene, test extension: ''
// command: 0x0005 / 0x01 => ViewScene, test extension: ''
// command: 0x0005 / 0x01 => ViewSceneResponse, test extension: ''
// command: 0x0005 / 0x01 => ViewScene, test extension: ''
// command: 0x0005 / 0x01 => ViewSceneResponse, test extension: ''
// command: 0x0005 / 0x02 => RemoveScene, test extension: ''
// command: 0x0005 / 0x02 => RemoveSceneResponse, test extension: ''
// command: 0x0005 / 0x02 => RemoveScene, test extension: ''
// command: 0x0005 / 0x02 => RemoveSceneResponse, test extension: ''
// command: 0x0005 / 0x03 => RemoveAllScenes, test extension: ''
// command: 0x0005 / 0x03 => RemoveAllScenesResponse, test extension: ''
// command: 0x0005 / 0x04 => StoreScene, test extension: ''
// command: 0x0005 / 0x04 => StoreSceneResponse, test extension: ''
// command: 0x0005 / 0x04 => StoreScene, test extension: ''
// command: 0x0005 / 0x04 => StoreSceneResponse, test extension: ''
// command: 0x0005 / 0x05 => RecallScene, test extension: ''
// command: 0x0005 / 0x06 => GetSceneMembership, test extension: ''
// command: 0x0005 / 0x06 => GetSceneMembershipResponse, test extension: ''
// command: 0x0005 / 0x40 => EnhancedAddScene, test extension: ''
// command: 0x0005 / 0x40 => EnhancedAddSceneResponse, test extension: ''
// command: 0x0005 / 0x40 => EnhancedAddScene, test extension: ''
// command: 0x0005 / 0x40 => EnhancedAddSceneResponse, test extension: ''
// command: 0x0005 / 0x40 => EnhancedAddScene, test extension: ''
// command: 0x0005 / 0x40 => EnhancedAddSceneResponse, test extension: ''
// command: 0x0005 / 0x40 => EnhancedAddScene, test extension: ''
// command: 0x0005 / 0x41 => EnhancedViewScene, test extension: ''
// command: 0x0005 / 0x41 => EnhancedViewSceneResponse, test extension: ''
// command: 0x0005 / 0x41 => EnhancedViewScene, test extension: ''
// command: 0x0005 / 0x41 => EnhancedViewSceneResponse, test extension: ''
// command: 0x0005 / 0x42 => CopyScene, test extension: ''
// command: 0x0005 / 0x42 => CopySceneResponse, test extension: ''
// command: 0x0005 / 0x42 => CopyScene, test extension: ''
// command: 0x0005 / 0x42 => CopySceneResponse, test extension: ''
// command: 0x0005 / 0x42 => CopyScene, test extension: ''
// command: 0x0005 / 0x42 => CopySceneResponse, test extension: ''
// command: 0x0005 / 0x42 => CopyScene, test extension: ''
// command: 0x0006 / 0x00 => Off, test extension: ''
// command: 0x0006 / 0x01 => On, test extension: ''
// command: 0x0006 / 0x02 => Toggle, test extension: ''
// command: 0x0006 / 0x40 => OffWithEffect, test extension: ''
// command: 0x0006 / 0x41 => OnWithRecallGlobalScene, test extension: ''
// command: 0x0006 / 0x42 => OnWithTimedOff, test extension: ''
// command: 0x0008 / 0x00 => MoveToLevel, test extension: ''
// command: 0x0008 / 0x01 => Move, test extension: ''
// command: 0x0008 / 0x02 => Step, test extension: ''
// command: 0x0008 / 0x03 => Stop, test extension: ''
// command: 0x0008 / 0x04 => MoveToLevelWithOnOff, test extension: ''
// command: 0x0008 / 0x05 => MoveWithOnOff, test extension: ''
// command: 0x0008 / 0x06 => StepWithOnOff, test extension: ''
// command: 0x0008 / 0x07 => StopWithOnOff, test extension: ''
// command: 0x0008 / 0x08 => MoveToClosestFrequency, test extension: ''
// command: 0x0025 / 0x00 => InstantAction, test extension: ''
// command: 0x0025 / 0x01 => InstantActionWithTransition, test extension: ''
// command: 0x0025 / 0x02 => StartAction, test extension: ''
// command: 0x0025 / 0x03 => StartActionWithDuration, test extension: ''
// command: 0x0025 / 0x04 => StopAction, test extension: ''
// command: 0x0025 / 0x05 => PauseAction, test extension: ''
// command: 0x0025 / 0x06 => PauseActionWithDuration, test extension: ''
// command: 0x0025 / 0x07 => ResumeAction, test extension: ''
// command: 0x0025 / 0x08 => EnableAction, test extension: ''
// command: 0x0025 / 0x09 => EnableActionWithDuration, test extension: ''
// command: 0x0025 / 0x0A => DisableAction, test extension: ''
// command: 0x0025 / 0x0B => DisableActionWithDuration, test extension: ''
// command: 0x0028 / 0x00 => MfgSpecificPing, test extension: ''
// command: 0x0029 / 0x00 => QueryImage, test extension: ''
// command: 0x0029 / 0x01 => QueryImageResponse, test extension: ''
// command: 0x0029 / 0x02 => ApplyUpdateRequest, test extension: ''
// command: 0x0029 / 0x03 => ApplyUpdateResponse, test extension: ''
// command: 0x0029 / 0x04 => NotifyUpdateApplied, test extension: ''
// command: 0x002A / 0x00 => AnnounceOtaProvider, test extension: ''
// command: 0x0030 / 0x00 => ArmFailSafe, test extension: ''
// command: 0x0030 / 0x01 => ArmFailSafeResponse, test extension: ''
// command: 0x0030 / 0x02 => SetRegulatoryConfig, test extension: ''
// command: 0x0030 / 0x03 => SetRegulatoryConfigResponse, test extension: ''
// command: 0x0030 / 0x04 => CommissioningComplete, test extension: ''
// command: 0x0030 / 0x05 => CommissioningCompleteResponse, test extension: ''
// command: 0x0031 / 0x00 => ScanNetworks, test extension: ''
// command: 0x0031 / 0x01 => ScanNetworksResponse, test extension: ''
// command: 0x0031 / 0x02 => AddOrUpdateWiFiNetwork, test extension: ''
// command: 0x0031 / 0x03 => AddOrUpdateThreadNetwork, test extension: ''
// command: 0x0031 / 0x04 => RemoveNetwork, test extension: ''
// command: 0x0031 / 0x05 => NetworkConfigResponse, test extension: ''
// command: 0x0031 / 0x06 => ConnectNetwork, test extension: ''
// command: 0x0031 / 0x07 => ConnectNetworkResponse, test extension: ''
// command: 0x0031 / 0x08 => ReorderNetwork, test extension: ''
// command: 0x0032 / 0x00 => RetrieveLogsRequest, test extension: ''
// command: 0x0032 / 0x01 => RetrieveLogsResponse, test extension: ''
// command: 0x0033 / 0x00 => TestEventTrigger, test extension: ''
// command: 0x0034 / 0x00 => ResetWatermarks, test extension: ''
// command: 0x0035 / 0x00 => ResetCounts, test extension: ''
// command: 0x0036 / 0x00 => ResetCounts, test extension: ''
// command: 0x0037 / 0x00 => ResetCounts, test extension: ''
// command: 0x0038 / 0x00 => SetUtcTime, test extension: ''
// command: 0x003C / 0x00 => OpenCommissioningWindow, test extension: ''
// command: 0x003C / 0x01 => OpenBasicCommissioningWindow, test extension: ''
// command: 0x003C / 0x02 => RevokeCommissioning, test extension: ''
// command: 0x003E / 0x00 => AttestationRequest, test extension: ''
// command: 0x003E / 0x01 => AttestationResponse, test extension: ''
// command: 0x003E / 0x02 => CertificateChainRequest, test extension: ''
// command: 0x003E / 0x03 => CertificateChainResponse, test extension: ''
// command: 0x003E / 0x04 => CSRRequest, test extension: ''
// command: 0x003E / 0x05 => CSRResponse, test extension: ''
// command: 0x003E / 0x06 => AddNOC, test extension: ''
// command: 0x003E / 0x07 => UpdateNOC, test extension: ''
// command: 0x003E / 0x08 => NOCResponse, test extension: ''
// command: 0x003E / 0x09 => UpdateFabricLabel, test extension: ''
// command: 0x003E / 0x0A => RemoveFabric, test extension: ''
// command: 0x003E / 0x0B => AddTrustedRootCertificate, test extension: ''
// command: 0x003F / 0x00 => KeySetWrite, test extension: ''
// command: 0x003F / 0x01 => KeySetRead, test extension: ''
// command: 0x003F / 0x02 => KeySetReadResponse, test extension: ''
// command: 0x003F / 0x03 => KeySetRemove, test extension: ''
// command: 0x003F / 0x04 => KeySetReadAllIndices, test extension: ''
// command: 0x003F / 0x05 => KeySetReadAllIndicesResponse, test extension: ''
// command: 0x0050 / 0x00 => ChangeToMode, test extension: ''
// command: 0x0101 / 0x00 => LockDoor, test extension: ''
// command: 0x0101 / 0x01 => UnlockDoor, test extension: ''
// command: 0x0101 / 0x03 => UnlockWithTimeout, test extension: ''
// command: 0x0101 / 0x0B => SetWeekDaySchedule, test extension: ''
// command: 0x0101 / 0x0C => GetWeekDaySchedule, test extension: ''
// command: 0x0101 / 0x0C => GetWeekDayScheduleResponse, test extension: ''
// command: 0x0101 / 0x0C => GetWeekDaySchedule, test extension: ''
// command: 0x0101 / 0x0C => GetWeekDayScheduleResponse, test extension: ''
// command: 0x0101 / 0x0D => ClearWeekDaySchedule, test extension: ''
// command: 0x0101 / 0x0E => SetYearDaySchedule, test extension: ''
// command: 0x0101 / 0x0F => GetYearDaySchedule, test extension: ''
// command: 0x0101 / 0x0F => GetYearDayScheduleResponse, test extension: ''
// command: 0x0101 / 0x0F => GetYearDaySchedule, test extension: ''
// command: 0x0101 / 0x0F => GetYearDayScheduleResponse, test extension: ''
// command: 0x0101 / 0x10 => ClearYearDaySchedule, test extension: ''
// command: 0x0101 / 0x11 => SetHolidaySchedule, test extension: ''
// command: 0x0101 / 0x12 => GetHolidaySchedule, test extension: ''
// command: 0x0101 / 0x12 => GetHolidayScheduleResponse, test extension: ''
// command: 0x0101 / 0x13 => ClearHolidaySchedule, test extension: ''
// command: 0x0101 / 0x1A => SetUser, test extension: ''
// command: 0x0101 / 0x1B => GetUser, test extension: ''
// command: 0x0101 / 0x1C => GetUserResponse, test extension: ''
// command: 0x0101 / 0x1D => ClearUser, test extension: ''
// command: 0x0101 / 0x22 => SetCredential, test extension: ''
// command: 0x0101 / 0x23 => SetCredentialResponse, test extension: ''
// command: 0x0101 / 0x24 => GetCredentialStatus, test extension: ''
// command: 0x0101 / 0x25 => GetCredentialStatusResponse, test extension: ''
// command: 0x0101 / 0x26 => ClearCredential, test extension: ''
// command: 0x0102 / 0x00 => UpOrOpen, test extension: ''
// command: 0x0102 / 0x01 => DownOrClose, test extension: ''
// command: 0x0102 / 0x02 => StopMotion, test extension: ''
// command: 0x0102 / 0x04 => GoToLiftValue, test extension: ''
// command: 0x0102 / 0x05 => GoToLiftPercentage, test extension: ''
// command: 0x0102 / 0x07 => GoToTiltValue, test extension: ''
// command: 0x0102 / 0x08 => GoToTiltPercentage, test extension: ''
// command: 0x0103 / 0x00 => BarrierControlGoToPercent, test extension: ''
// command: 0x0103 / 0x01 => BarrierControlStop, test extension: ''
// command: 0x0201 / 0x00 => SetpointRaiseLower, test extension: ''
// command: 0x0201 / 0x00 => GetWeeklyScheduleResponse, test extension: ''
// command: 0x0201 / 0x00 => SetpointRaiseLower, test extension: ''
// command: 0x0201 / 0x00 => GetWeeklyScheduleResponse, test extension: ''
// command: 0x0201 / 0x01 => SetWeeklySchedule, test extension: ''
// command: 0x0201 / 0x02 => GetWeeklySchedule, test extension: ''
// command: 0x0201 / 0x03 => ClearWeeklySchedule, test extension: ''
// command: 0x0300 / 0x00 => MoveToHue, test extension: ''
// command: 0x0300 / 0x01 => MoveHue, test extension: ''
// command: 0x0300 / 0x02 => StepHue, test extension: ''
// command: 0x0300 / 0x03 => MoveToSaturation, test extension: ''
// command: 0x0300 / 0x04 => MoveSaturation, test extension: ''
// command: 0x0300 / 0x05 => StepSaturation, test extension: ''
// command: 0x0300 / 0x06 => MoveToHueAndSaturation, test extension: ''
// command: 0x0300 / 0x07 => MoveToColor, test extension: ''
// command: 0x0300 / 0x08 => MoveColor, test extension: ''
// command: 0x0300 / 0x09 => StepColor, test extension: ''
// command: 0x0300 / 0x0A => MoveToColorTemperature, test extension: ''
// command: 0x0300 / 0x40 => EnhancedMoveToHue, test extension: ''
// command: 0x0300 / 0x41 => EnhancedMoveHue, test extension: ''
// command: 0x0300 / 0x42 => EnhancedStepHue, test extension: ''
// command: 0x0300 / 0x43 => EnhancedMoveToHueAndSaturation, test extension: ''
// command: 0x0300 / 0x44 => ColorLoopSet, test extension: ''
// command: 0x0300 / 0x47 => StopMoveStep, test extension: ''
// command: 0x0300 / 0x4B => MoveColorTemperature, test extension: ''
// command: 0x0300 / 0x4C => StepColorTemperature, test extension: ''
// command: 0x0504 / 0x00 => ChangeChannel, test extension: ''
// command: 0x0504 / 0x01 => ChangeChannelResponse, test extension: ''
// command: 0x0504 / 0x02 => ChangeChannelByNumber, test extension: ''
// command: 0x0504 / 0x03 => SkipChannel, test extension: ''
// command: 0x0505 / 0x00 => NavigateTarget, test extension: ''
// command: 0x0505 / 0x01 => NavigateTargetResponse, test extension: ''
// command: 0x0506 / 0x00 => Play, test extension: ''
// command: 0x0506 / 0x01 => Pause, test extension: ''
// command: 0x0506 / 0x02 => StopPlayback, test extension: ''
// command: 0x0506 / 0x03 => StartOver, test extension: ''
// command: 0x0506 / 0x04 => Previous, test extension: ''
// command: 0x0506 / 0x05 => Next, test extension: ''
// command: 0x0506 / 0x06 => Rewind, test extension: ''
// command: 0x0506 / 0x07 => FastForward, test extension: ''
// command: 0x0506 / 0x08 => SkipForward, test extension: ''
// command: 0x0506 / 0x09 => SkipBackward, test extension: ''
// command: 0x0506 / 0x0A => PlaybackResponse, test extension: ''
// command: 0x0506 / 0x0B => Seek, test extension: ''
// command: 0x0507 / 0x00 => SelectInput, test extension: ''
// command: 0x0507 / 0x01 => ShowInputStatus, test extension: ''
// command: 0x0507 / 0x02 => HideInputStatus, test extension: ''
// command: 0x0507 / 0x03 => RenameInput, test extension: ''
// command: 0x0508 / 0x00 => Sleep, test extension: ''
// command: 0x0509 / 0x00 => SendKey, test extension: ''
// command: 0x0509 / 0x01 => SendKeyResponse, test extension: ''
// command: 0x050A / 0x00 => LaunchContent, test extension: ''
// command: 0x050A / 0x01 => LaunchURL, test extension: ''
// command: 0x050A / 0x02 => LaunchResponse, test extension: ''
// command: 0x050B / 0x00 => SelectOutput, test extension: ''
// command: 0x050B / 0x01 => RenameOutput, test extension: ''
// command: 0x050C / 0x00 => LaunchApp, test extension: ''
// command: 0x050C / 0x01 => StopApp, test extension: ''
// command: 0x050C / 0x02 => HideApp, test extension: ''
// command: 0x050C / 0x03 => LauncherResponse, test extension: ''
// command: 0x050E / 0x00 => GetSetupPIN, test extension: ''
// command: 0x050E / 0x01 => GetSetupPINResponse, test extension: ''
// command: 0x050E / 0x02 => Login, test extension: ''
// command: 0x050E / 0x03 => Logout, test extension: ''
// command: 0x0B04 / 0x00 => GetProfileInfoCommand, test extension: ''
// command: 0x0B04 / 0x00 => GetProfileInfoResponseCommand, test extension: ''
// command: 0x0B04 / 0x01 => GetMeasurementProfileResponseCommand, test extension: ''
// command: 0x0B04 / 0x01 => GetMeasurementProfileCommand, test extension: ''
// command: 0x0B04 / 0x01 => GetMeasurementProfileResponseCommand, test extension: ''
// command: 0x0B04 / 0x01 => GetMeasurementProfileCommand, test extension: ''
// command: 0x0B04 / 0x01 => GetMeasurementProfileResponseCommand, test extension: ''
// command: 0x0B04 / 0x01 => GetMeasurementProfileCommand, test extension: ''
// command: 0x0B04 / 0x01 => GetMeasurementProfileResponseCommand, test extension: ''
// command: 0x1046 / 0x00 => RegisterClientMonitoring, test extension: ''
// command: 0x1046 / 0x01 => StayAwakeRequest, test extension: ''
// command: 0xFFF1FC05 / 0x00 => Test, test extension: ''
// command: 0xFFF1FC05 / 0x00 => TestSpecificResponse, test extension: ''
// command: 0xFFF1FC05 / 0x01 => TestNotHandled, test extension: ''
// command: 0xFFF1FC05 / 0x01 => TestAddArgumentsResponse, test extension: ''
// command: 0xFFF1FC05 / 0x02 => TestSpecific, test extension: ''
// command: 0xFFF1FC05 / 0x02 => TestSimpleArgumentResponse, test extension: ''
// command: 0xFFF1FC05 / 0x03 => TestUnknownCommand, test extension: ''
// command: 0xFFF1FC05 / 0x03 => TestStructArrayArgumentResponse, test extension: ''
// command: 0xFFF1FC05 / 0x04 => TestAddArguments, test extension: ''
// command: 0xFFF1FC05 / 0x04 => TestListInt8UReverseResponse, test extension: ''
// command: 0xFFF1FC05 / 0x04 => TestAddArguments, test extension: ''
// command: 0xFFF1FC05 / 0x05 => TestSimpleArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x05 => TestEnumsResponse, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestStructArrayArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestNullableOptionalResponse, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestStructArrayArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestNullableOptionalResponse, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestStructArrayArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestNullableOptionalResponse, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestStructArrayArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestNullableOptionalResponse, test extension: ''
// command: 0xFFF1FC05 / 0x06 => TestStructArrayArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x07 => TestStructArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x07 => TestComplexNullableOptionalResponse, test extension: ''
// command: 0xFFF1FC05 / 0x08 => TestNestedStructArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x08 => BooleanResponse, test extension: ''
// command: 0xFFF1FC05 / 0x09 => TestListStructArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x09 => SimpleStructResponse, test extension: ''
// command: 0xFFF1FC05 / 0x0A => TestListInt8UArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x0A => TestEmitTestEventResponse, test extension: ''
// command: 0xFFF1FC05 / 0x0B => TestNestedStructListArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x0B => TestEmitTestFabricScopedEventResponse, test extension: ''
// command: 0xFFF1FC05 / 0x0C => TestListNestedStructListArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x0D => TestListInt8UReverseRequest, test extension: ''
// command: 0xFFF1FC05 / 0x0E => TestEnumsRequest, test extension: ''
// command: 0xFFF1FC05 / 0x0F => TestNullableOptionalRequest, test extension: ''
// command: 0xFFF1FC05 / 0x10 => TestComplexNullableOptionalRequest, test extension: ''
// command: 0xFFF1FC05 / 0x11 => SimpleStructEchoRequest, test extension: ''
// command: 0xFFF1FC05 / 0x12 => TimedInvokeRequest, test extension: ''
// command: 0xFFF1FC05 / 0x13 => TestSimpleOptionalArgumentRequest, test extension: ''
// command: 0xFFF1FC05 / 0x14 => TestEmitTestEventRequest, test extension: ''
// command: 0xFFF1FC05 / 0x15 => TestEmitTestFabricScopedEventRequest, test extension: ''
// command: 0xFFF1FC06 / 0x00 => FailAtFault, test extension: ''
// command: 0xFFF1FC06 / 0x01 => FailRandomlyAtFault, test extension: ''

------------------- Attributes -------------------
// attribute: 0x0000 / 0xFFF8 => GeneratedCommandList, extensions: '', ''
// attribute: 0x0000 / 0xFFF9 => AcceptedCommandList, extensions: '', ''
// attribute: 0x0000 / 0xFFFB => AttributeList, extensions: '', ''
// attribute: 0x0000 / 0xFFFC => FeatureMap, extensions: '', ''
// attribute: 0x0000 / 0xFFFC => FeatureMap, extensions: '', ''
// attribute: 0x0000 / 0xFFFD => ClusterRevision, extensions: '', ''
// attribute: 0x0000 / 0xFFFD => ClusterRevision, extensions: '', ''
// attribute: 0x0003 / 0x0000 => identify time, extensions: '', ''
// attribute: 0x0003 / 0x0001 => identify type, extensions: '', ''
// attribute: 0x0004 / 0x0000 => NameSupport, extensions: '', ''
// attribute: 0x0005 / 0x0000 => SceneCount, extensions: '', ''
// attribute: 0x0005 / 0x0001 => CurrentScene, extensions: '', ''
// attribute: 0x0005 / 0x0002 => CurrentGroup, extensions: '', ''
// attribute: 0x0005 / 0x0003 => SceneValid, extensions: '', ''
// attribute: 0x0005 / 0x0004 => NameSupport, extensions: '', ''
// attribute: 0x0005 / 0x0005 => LastConfiguredBy, extensions: '', ''
// attribute: 0x0006 / 0x0000 => OnOff, extensions: '', ''
// attribute: 0x0006 / 0x4000 => GlobalSceneControl, extensions: '', ''
// attribute: 0x0006 / 0x4001 => OnTime, extensions: '', ''
// attribute: 0x0006 / 0x4002 => OffWaitTime, extensions: '', ''
// attribute: 0x0006 / 0x4003 => StartUpOnOff, extensions: '', ''
// attribute: 0x0007 / 0x0000 => switch type, extensions: '', ''
// attribute: 0x0007 / 0x0010 => switch actions, extensions: '', ''
// attribute: 0x0008 / 0x0000 => CurrentLevel, extensions: '', ''
// attribute: 0x0008 / 0x0001 => RemainingTime, extensions: '', ''
// attribute: 0x0008 / 0x0002 => MinLevel, extensions: '', ''
// attribute: 0x0008 / 0x0003 => MaxLevel, extensions: '', ''
// attribute: 0x0008 / 0x0004 => CurrentFrequency, extensions: '', ''
// attribute: 0x0008 / 0x0005 => MinFrequency, extensions: '', ''
// attribute: 0x0008 / 0x0006 => MaxFrequency, extensions: '', ''
// attribute: 0x0008 / 0x000F => Options, extensions: '', ''
// attribute: 0x0008 / 0x0010 => OnOffTransitionTime, extensions: '', ''
// attribute: 0x0008 / 0x0011 => OnLevel, extensions: '', ''
// attribute: 0x0008 / 0x0012 => OnTransitionTime, extensions: '', ''
// attribute: 0x0008 / 0x0013 => OffTransitionTime, extensions: '', ''
// attribute: 0x0008 / 0x0014 => DefaultMoveRate, extensions: '', ''
// attribute: 0x0008 / 0x4000 => StartUpCurrentLevel, extensions: '', ''
// attribute: 0x000F / 0x0004 => active text, extensions: '', ''
// attribute: 0x000F / 0x001C => description, extensions: '', ''
// attribute: 0x000F / 0x002E => inactive text, extensions: '', ''
// attribute: 0x000F / 0x0051 => out of service, extensions: '', ''
// attribute: 0x000F / 0x0054 => polarity, extensions: '', ''
// attribute: 0x000F / 0x0055 => present value, extensions: '', ''
// attribute: 0x000F / 0x0067 => reliability, extensions: '', ''
// attribute: 0x000F / 0x006F => status flags, extensions: '', ''
// attribute: 0x000F / 0x0100 => application type, extensions: '', ''
// attribute: 0x001D / 0x0000 => DeviceTypeList, extensions: '', ''
// attribute: 0x001D / 0x0001 => ServerList, extensions: '', ''
// attribute: 0x001D / 0x0002 => ClientList, extensions: '', ''
// attribute: 0x001D / 0x0003 => PartsList, extensions: '', ''
// attribute: 0x001E / 0x0000 => Binding, extensions: '', ''
// attribute: 0x001F / 0x0000 => ACL, extensions: '', ''
// attribute: 0x001F / 0x0001 => Extension, extensions: '', ''
// attribute: 0x001F / 0x0002 => SubjectsPerAccessControlEntry, extensions: '', ''
// attribute: 0x001F / 0x0003 => TargetsPerAccessControlEntry, extensions: '', ''
// attribute: 0x001F / 0x0004 => AccessControlEntriesPerFabric, extensions: '', ''
// attribute: 0x0025 / 0x0000 => ActionList, extensions: '', ''
// attribute: 0x0025 / 0x0001 => EndpointLists, extensions: '', ''
// attribute: 0x0025 / 0x0002 => SetupURL, extensions: '', ''
// attribute: 0x0028 / 0x0000 => DataModelRevision, extensions: '', ''
// attribute: 0x0028 / 0x0001 => VendorName, extensions: '', ''
// attribute: 0x0028 / 0x0002 => VendorID, extensions: '', ''
// attribute: 0x0028 / 0x0003 => ProductName, extensions: '', ''
// attribute: 0x0028 / 0x0004 => ProductID, extensions: '', ''
// attribute: 0x0028 / 0x0005 => NodeLabel, extensions: '', ''
// attribute: 0x0028 / 0x0006 => Location, extensions: '', ''
// attribute: 0x0028 / 0x0007 => HardwareVersion, extensions: '', ''
// attribute: 0x0028 / 0x0008 => HardwareVersionString, extensions: '', ''
// attribute: 0x0028 / 0x0009 => SoftwareVersion, extensions: '', ''
// attribute: 0x0028 / 0x000A => SoftwareVersionString, extensions: '', ''
// attribute: 0x0028 / 0x000B => ManufacturingDate, extensions: '', ''
// attribute: 0x0028 / 0x000C => PartNumber, extensions: '', ''
// attribute: 0x0028 / 0x000D => ProductURL, extensions: '', ''
// attribute: 0x0028 / 0x000E => ProductLabel, extensions: '', ''
// attribute: 0x0028 / 0x000F => SerialNumber, extensions: '', ''
// attribute: 0x0028 / 0x0010 => LocalConfigDisabled, extensions: '', ''
// attribute: 0x0028 / 0x0011 => Reachable, extensions: '', ''
// attribute: 0x0028 / 0x0012 => UniqueID, extensions: '', ''
// attribute: 0x0028 / 0x0013 => CapabilityMinima, extensions: '', ''
// attribute: 0x002A / 0x0000 => DefaultOtaProviders, extensions: '', ''
// attribute: 0x002A / 0x0001 => UpdatePossible, extensions: '', ''
// attribute: 0x002A / 0x0002 => UpdateState, extensions: '', ''
// attribute: 0x002A / 0x0003 => UpdateStateProgress, extensions: '', ''
// attribute: 0x002B / 0x0000 => ActiveLocale, extensions: '', ''
// attribute: 0x002B / 0x0001 => SupportedLocales, extensions: '', ''
// attribute: 0x002C / 0x0000 => HourFormat, extensions: '', ''
// attribute: 0x002C / 0x0001 => ActiveCalendarType, extensions: '', ''
// attribute: 0x002C / 0x0002 => SupportedCalendarTypes, extensions: '', ''
// attribute: 0x002D / 0x0000 => TemperatureUnit, extensions: '', ''
// attribute: 0x002E / 0x0000 => Sources, extensions: '', ''
// attribute: 0x002F / 0x0000 => Status, extensions: '', ''
// attribute: 0x002F / 0x0001 => Order, extensions: '', ''
// attribute: 0x002F / 0x0002 => Description, extensions: '', ''
// attribute: 0x002F / 0x0003 => WiredAssessedInputVoltage, extensions: '', ''
// attribute: 0x002F / 0x0004 => WiredAssessedInputFrequency, extensions: '', ''
// attribute: 0x002F / 0x0005 => WiredCurrentType, extensions: '', ''
// attribute: 0x002F / 0x0006 => WiredAssessedCurrent, extensions: '', ''
// attribute: 0x002F / 0x0007 => WiredNominalVoltage, extensions: '', ''
// attribute: 0x002F / 0x0008 => WiredMaximumCurrent, extensions: '', ''
// attribute: 0x002F / 0x0009 => WiredPresent, extensions: '', ''
// attribute: 0x002F / 0x000A => ActiveWiredFaults, extensions: '', ''
// attribute: 0x002F / 0x000B => BatVoltage, extensions: '', ''
// attribute: 0x002F / 0x000C => BatPercentRemaining, extensions: '', ''
// attribute: 0x002F / 0x000D => BatTimeRemaining, extensions: '', ''
// attribute: 0x002F / 0x000E => BatChargeLevel, extensions: '', ''
// attribute: 0x002F / 0x000F => BatReplacementNeeded, extensions: '', ''
// attribute: 0x002F / 0x0010 => BatReplaceability, extensions: '', ''
// attribute: 0x002F / 0x0011 => BatPresent, extensions: '', ''
// attribute: 0x002F / 0x0012 => ActiveBatFaults, extensions: '', ''
// attribute: 0x002F / 0x0013 => BatReplacementDescription, extensions: '', ''
// attribute: 0x002F / 0x0014 => BatCommonDesignation, extensions: '', ''
// attribute: 0x002F / 0x0015 => BatANSIDesignation, extensions: '', ''
// attribute: 0x002F / 0x0016 => BatIECDesignation, extensions: '', ''
// attribute: 0x002F / 0x0017 => BatApprovedChemistry, extensions: '', ''
// attribute: 0x002F / 0x0018 => BatCapacity, extensions: '', ''
// attribute: 0x002F / 0x0019 => BatQuantity, extensions: '', ''
// attribute: 0x002F / 0x001A => BatChargeState, extensions: '', ''
// attribute: 0x002F / 0x001B => BatTimeToFullCharge, extensions: '', ''
// attribute: 0x002F / 0x001C => BatFunctionalWhileCharging, extensions: '', ''
// attribute: 0x002F / 0x001D => BatChargingCurrent, extensions: '', ''
// attribute: 0x002F / 0x001E => ActiveBatChargeFaults, extensions: '', ''
// attribute: 0x0030 / 0x0000 => Breadcrumb, extensions: '', ''
// attribute: 0x0030 / 0x0001 => BasicCommissioningInfo, extensions: '', ''
// attribute: 0x0030 / 0x0002 => RegulatoryConfig, extensions: '', ''
// attribute: 0x0030 / 0x0003 => LocationCapability, extensions: '', ''
// attribute: 0x0030 / 0x0004 => SupportsConcurrentConnection, extensions: '', ''
// attribute: 0x0031 / 0x0000 => MaxNetworks, extensions: '', ''
// attribute: 0x0031 / 0x0001 => Networks, extensions: '', ''
// attribute: 0x0031 / 0x0002 => ScanMaxTimeSeconds, extensions: '', ''
// attribute: 0x0031 / 0x0003 => ConnectMaxTimeSeconds, extensions: '', ''
// attribute: 0x0031 / 0x0004 => InterfaceEnabled, extensions: '', ''
// attribute: 0x0031 / 0x0005 => LastNetworkingStatus, extensions: '', ''
// attribute: 0x0031 / 0x0006 => LastNetworkID, extensions: '', ''
// attribute: 0x0031 / 0x0007 => LastConnectErrorValue, extensions: '', ''
// attribute: 0x0033 / 0x0000 => NetworkInterfaces, extensions: '', ''
// attribute: 0x0033 / 0x0001 => RebootCount, extensions: '', ''
// attribute: 0x0033 / 0x0002 => UpTime, extensions: '', ''
// attribute: 0x0033 / 0x0003 => TotalOperationalHours, extensions: '', ''
// attribute: 0x0033 / 0x0004 => BootReasons, extensions: '', ''
// attribute: 0x0033 / 0x0005 => ActiveHardwareFaults, extensions: '', ''
// attribute: 0x0033 / 0x0006 => ActiveRadioFaults, extensions: '', ''
// attribute: 0x0033 / 0x0007 => ActiveNetworkFaults, extensions: '', ''
// attribute: 0x0033 / 0x0008 => TestEventTriggersEnabled, extensions: '', ''
// attribute: 0x0034 / 0x0000 => ThreadMetrics, extensions: '', ''
// attribute: 0x0034 / 0x0001 => CurrentHeapFree, extensions: '', ''
// attribute: 0x0034 / 0x0002 => CurrentHeapUsed, extensions: '', ''
// attribute: 0x0034 / 0x0003 => CurrentHeapHighWatermark, extensions: '', ''
// attribute: 0x0035 / 0x0000 => channel, extensions: '', ''
// attribute: 0x0035 / 0x0001 => RoutingRole, extensions: '', ''
// attribute: 0x0035 / 0x0002 => NetworkName, extensions: '', ''
// attribute: 0x0035 / 0x0003 => PanId, extensions: '', ''
// attribute: 0x0035 / 0x0004 => ExtendedPanId, extensions: '', ''
// attribute: 0x0035 / 0x0005 => MeshLocalPrefix, extensions: '', ''
// attribute: 0x0035 / 0x0006 => OverrunCount, extensions: '', ''
// attribute: 0x0035 / 0x0007 => NeighborTableList, extensions: '', ''
// attribute: 0x0035 / 0x0008 => RouteTableList, extensions: '', ''
// attribute: 0x0035 / 0x0009 => PartitionId, extensions: '', ''
// attribute: 0x0035 / 0x000A => weighting, extensions: '', ''
// attribute: 0x0035 / 0x000B => DataVersion, extensions: '', ''
// attribute: 0x0035 / 0x000C => StableDataVersion, extensions: '', ''
// attribute: 0x0035 / 0x000D => LeaderRouterId, extensions: '', ''
// attribute: 0x0035 / 0x000E => DetachedRoleCount, extensions: '', ''
// attribute: 0x0035 / 0x000F => ChildRoleCount, extensions: '', ''
// attribute: 0x0035 / 0x0010 => RouterRoleCount, extensions: '', ''
// attribute: 0x0035 / 0x0011 => LeaderRoleCount, extensions: '', ''
// attribute: 0x0035 / 0x0012 => AttachAttemptCount, extensions: '', ''
// attribute: 0x0035 / 0x0013 => PartitionIdChangeCount, extensions: '', ''
// attribute: 0x0035 / 0x0014 => BetterPartitionAttachAttemptCount, extensions: '', ''
// attribute: 0x0035 / 0x0015 => ParentChangeCount, extensions: '', ''
// attribute: 0x0035 / 0x0016 => TxTotalCount, extensions: '', ''
// attribute: 0x0035 / 0x0017 => TxUnicastCount, extensions: '', ''
// attribute: 0x0035 / 0x0018 => TxBroadcastCount, extensions: '', ''
// attribute: 0x0035 / 0x0019 => TxAckRequestedCount, extensions: '', ''
// attribute: 0x0035 / 0x001A => TxAckedCount, extensions: '', ''
// attribute: 0x0035 / 0x001B => TxNoAckRequestedCount, extensions: '', ''
// attribute: 0x0035 / 0x001C => TxDataCount, extensions: '', ''
// attribute: 0x0035 / 0x001D => TxDataPollCount, extensions: '', ''
// attribute: 0x0035 / 0x001E => TxBeaconCount, extensions: '', ''
// attribute: 0x0035 / 0x001F => TxBeaconRequestCount, extensions: '', ''
// attribute: 0x0035 / 0x0020 => TxOtherCount, extensions: '', ''
// attribute: 0x0035 / 0x0021 => TxRetryCount, extensions: '', ''
// attribute: 0x0035 / 0x0022 => TxDirectMaxRetryExpiryCount, extensions: '', ''
// attribute: 0x0035 / 0x0023 => TxIndirectMaxRetryExpiryCount, extensions: '', ''
// attribute: 0x0035 / 0x0024 => TxErrCcaCount, extensions: '', ''
// attribute: 0x0035 / 0x0025 => TxErrAbortCount, extensions: '', ''
// attribute: 0x0035 / 0x0026 => TxErrBusyChannelCount, extensions: '', ''
// attribute: 0x0035 / 0x0027 => RxTotalCount, extensions: '', ''
// attribute: 0x0035 / 0x0028 => RxUnicastCount, extensions: '', ''
// attribute: 0x0035 / 0x0029 => RxBroadcastCount, extensions: '', ''
// attribute: 0x0035 / 0x002A => RxDataCount, extensions: '', ''
// attribute: 0x0035 / 0x002B => RxDataPollCount, extensions: '', ''
// attribute: 0x0035 / 0x002C => RxBeaconCount, extensions: '', ''
// attribute: 0x0035 / 0x002D => RxBeaconRequestCount, extensions: '', ''
// attribute: 0x0035 / 0x002E => RxOtherCount, extensions: '', ''
// attribute: 0x0035 / 0x002F => RxAddressFilteredCount, extensions: '', ''
// attribute: 0x0035 / 0x0030 => RxDestAddrFilteredCount, extensions: '', ''
// attribute: 0x0035 / 0x0031 => RxDuplicatedCount, extensions: '', ''
// attribute: 0x0035 / 0x0032 => RxErrNoFrameCount, extensions: '', ''
// attribute: 0x0035 / 0x0033 => RxErrUnknownNeighborCount, extensions: '', ''
// attribute: 0x0035 / 0x0034 => RxErrInvalidSrcAddrCount, extensions: '', ''
// attribute: 0x0035 / 0x0035 => RxErrSecCount, extensions: '', ''
// attribute: 0x0035 / 0x0036 => RxErrFcsCount, extensions: '', ''
// attribute: 0x0035 / 0x0037 => RxErrOtherCount, extensions: '', ''
// attribute: 0x0035 / 0x0038 => ActiveTimestamp, extensions: '', ''
// attribute: 0x0035 / 0x0039 => PendingTimestamp, extensions: '', ''
// attribute: 0x0035 / 0x003A => Delay, extensions: '', ''
// attribute: 0x0035 / 0x003B => SecurityPolicy, extensions: '', ''
// attribute: 0x0035 / 0x003C => ChannelPage0Mask, extensions: '', ''
// attribute: 0x0035 / 0x003D => OperationalDatasetComponents, extensions: '', ''
// attribute: 0x0035 / 0x003E => ActiveNetworkFaultsList, extensions: '', ''
// attribute: 0x0036 / 0x0000 => bssid, extensions: '', ''
// attribute: 0x0036 / 0x0001 => SecurityType, extensions: '', ''
// attribute: 0x0036 / 0x0002 => WiFiVersion, extensions: '', ''
// attribute: 0x0036 / 0x0003 => ChannelNumber, extensions: '', ''
// attribute: 0x0036 / 0x0004 => Rssi, extensions: '', ''
// attribute: 0x0036 / 0x0005 => BeaconLostCount, extensions: '', ''
// attribute: 0x0036 / 0x0006 => BeaconRxCount, extensions: '', ''
// attribute: 0x0036 / 0x0007 => PacketMulticastRxCount, extensions: '', ''
// attribute: 0x0036 / 0x0008 => PacketMulticastTxCount, extensions: '', ''
// attribute: 0x0036 / 0x0009 => PacketUnicastRxCount, extensions: '', ''
// attribute: 0x0036 / 0x000A => PacketUnicastTxCount, extensions: '', ''
// attribute: 0x0036 / 0x000B => CurrentMaxRate, extensions: '', ''
// attribute: 0x0036 / 0x000C => OverrunCount, extensions: '', ''
// attribute: 0x0037 / 0x0000 => PHYRate, extensions: '', ''
// attribute: 0x0037 / 0x0001 => FullDuplex, extensions: '', ''
// attribute: 0x0037 / 0x0002 => PacketRxCount, extensions: '', ''
// attribute: 0x0037 / 0x0003 => PacketTxCount, extensions: '', ''
// attribute: 0x0037 / 0x0004 => TxErrCount, extensions: '', ''
// attribute: 0x0037 / 0x0005 => CollisionCount, extensions: '', ''
// attribute: 0x0037 / 0x0006 => OverrunCount, extensions: '', ''
// attribute: 0x0037 / 0x0007 => CarrierDetect, extensions: '', ''
// attribute: 0x0037 / 0x0008 => TimeSinceReset, extensions: '', ''
// attribute: 0x0038 / 0x0000 => UTCTime, extensions: '', ''
// attribute: 0x0038 / 0x0001 => Granularity, extensions: '', ''
// attribute: 0x0038 / 0x0002 => TimeSource, extensions: '', ''
// attribute: 0x0038 / 0x0003 => TrustedTimeNodeId, extensions: '', ''
// attribute: 0x0038 / 0x0004 => DefaultNtp, extensions: '', ''
// attribute: 0x0038 / 0x0005 => TimeZone, extensions: '', ''
// attribute: 0x0038 / 0x0006 => DstOffset, extensions: '', ''
// attribute: 0x0038 / 0x0007 => LocalTime, extensions: '', ''
// attribute: 0x0038 / 0x0008 => TimeZoneDatabase, extensions: '', ''
// attribute: 0x0038 / 0x0009 => NtpServerPort, extensions: '', ''
// attribute: 0x0039 / 0x0001 => VendorName, extensions: '', ''
// attribute: 0x0039 / 0x0002 => VendorID, extensions: '', ''
// attribute: 0x0039 / 0x0003 => ProductName, extensions: '', ''
// attribute: 0x0039 / 0x0005 => NodeLabel, extensions: '', ''
// attribute: 0x0039 / 0x0007 => HardwareVersion, extensions: '', ''
// attribute: 0x0039 / 0x0008 => HardwareVersionString, extensions: '', ''
// attribute: 0x0039 / 0x0009 => SoftwareVersion, extensions: '', ''
// attribute: 0x0039 / 0x000A => SoftwareVersionString, extensions: '', ''
// attribute: 0x0039 / 0x000B => ManufacturingDate, extensions: '', ''
// attribute: 0x0039 / 0x000C => PartNumber, extensions: '', ''
// attribute: 0x0039 / 0x000D => ProductURL, extensions: '', ''
// attribute: 0x0039 / 0x000E => ProductLabel, extensions: '', ''
// attribute: 0x0039 / 0x000F => SerialNumber, extensions: '', ''
// attribute: 0x0039 / 0x0011 => Reachable, extensions: '', ''
// attribute: 0x0039 / 0x0012 => UniqueID, extensions: '', ''
// attribute: 0x003B / 0x0000 => number of positions, extensions: '', ''
// attribute: 0x003B / 0x0001 => current position, extensions: '', ''
// attribute: 0x003B / 0x0002 => multi press max, extensions: '', ''
// attribute: 0x003C / 0x0000 => WindowStatus, extensions: '', ''
// attribute: 0x003C / 0x0001 => AdminFabricIndex, extensions: '', ''
// attribute: 0x003C / 0x0002 => AdminVendorId, extensions: '', ''
// attribute: 0x003E / 0x0000 => NOCs, extensions: '', ''
// attribute: 0x003E / 0x0001 => Fabrics, extensions: '', ''
// attribute: 0x003E / 0x0002 => SupportedFabrics, extensions: '', ''
// attribute: 0x003E / 0x0003 => CommissionedFabrics, extensions: '', ''
// attribute: 0x003E / 0x0004 => TrustedRootCertificates, extensions: '', ''
// attribute: 0x003E / 0x0005 => CurrentFabricIndex, extensions: '', ''
// attribute: 0x003F / 0x0000 => GroupKeyMap, extensions: '', ''
// attribute: 0x003F / 0x0001 => GroupTable, extensions: '', ''
// attribute: 0x003F / 0x0002 => MaxGroupsPerFabric, extensions: '', ''
// attribute: 0x003F / 0x0003 => MaxGroupKeysPerFabric, extensions: '', ''
// attribute: 0x0040 / 0x0000 => label list, extensions: '', ''
// attribute: 0x0041 / 0x0000 => label list, extensions: '', ''
// attribute: 0x0045 / 0x0000 => StateValue, extensions: '', ''
// attribute: 0x0050 / 0x0000 => Description, extensions: '', ''
// attribute: 0x0050 / 0x0001 => StandardNamespace, extensions: '', ''
// attribute: 0x0050 / 0x0002 => SupportedModes, extensions: '', ''
// attribute: 0x0050 / 0x0003 => CurrentMode, extensions: '', ''
// attribute: 0x0050 / 0x0004 => StartUpMode, extensions: '', ''
// attribute: 0x0050 / 0x0005 => OnMode, extensions: '', ''
// attribute: 0x0101 / 0x0000 => LockState, extensions: '', ''
// attribute: 0x0101 / 0x0001 => LockType, extensions: '', ''
// attribute: 0x0101 / 0x0002 => ActuatorEnabled, extensions: '', ''
// attribute: 0x0101 / 0x0003 => DoorState, extensions: '', ''
// attribute: 0x0101 / 0x0004 => DoorOpenEvents, extensions: '', ''
// attribute: 0x0101 / 0x0005 => DoorClosedEvents, extensions: '', ''
// attribute: 0x0101 / 0x0006 => OpenPeriod, extensions: '', ''
// attribute: 0x0101 / 0x0011 => NumberOfTotalUsersSupported, extensions: '', ''
// attribute: 0x0101 / 0x0012 => NumberOfPINUsersSupported, extensions: '', ''
// attribute: 0x0101 / 0x0013 => NumberOfRFIDUsersSupported, extensions: '', ''
// attribute: 0x0101 / 0x0014 => NumberOfWeekDaySchedulesSupportedPerUser, extensions: '', ''
// attribute: 0x0101 / 0x0015 => NumberOfYearDaySchedulesSupportedPerUser, extensions: '', ''
// attribute: 0x0101 / 0x0016 => NumberOfHolidaySchedulesSupported, extensions: '', ''
// attribute: 0x0101 / 0x0017 => MaxPINCodeLength, extensions: '', ''
// attribute: 0x0101 / 0x0018 => MinPINCodeLength, extensions: '', ''
// attribute: 0x0101 / 0x0019 => MaxRFIDCodeLength, extensions: '', ''
// attribute: 0x0101 / 0x001A => MinRFIDCodeLength, extensions: '', ''
// attribute: 0x0101 / 0x001B => CredentialRulesSupport, extensions: '', ''
// attribute: 0x0101 / 0x001C => NumberOfCredentialsSupportedPerUser, extensions: '', ''
// attribute: 0x0101 / 0x0021 => Language, extensions: '', ''
// attribute: 0x0101 / 0x0022 => LEDSettings, extensions: '', ''
// attribute: 0x0101 / 0x0023 => AutoRelockTime, extensions: '', ''
// attribute: 0x0101 / 0x0024 => SoundVolume, extensions: '', ''
// attribute: 0x0101 / 0x0025 => OperatingMode, extensions: '', ''
// attribute: 0x0101 / 0x0026 => SupportedOperatingModes, extensions: '', ''
// attribute: 0x0101 / 0x0027 => DefaultConfigurationRegister, extensions: '', ''
// attribute: 0x0101 / 0x0028 => EnableLocalProgramming, extensions: '', ''
// attribute: 0x0101 / 0x0029 => EnableOneTouchLocking, extensions: '', ''
// attribute: 0x0101 / 0x002A => EnableInsideStatusLED, extensions: '', ''
// attribute: 0x0101 / 0x002B => EnablePrivacyModeButton, extensions: '', ''
// attribute: 0x0101 / 0x002C => LocalProgrammingFeatures, extensions: '', ''
// attribute: 0x0101 / 0x0030 => WrongCodeEntryLimit, extensions: '', ''
// attribute: 0x0101 / 0x0031 => UserCodeTemporaryDisableTime, extensions: '', ''
// attribute: 0x0101 / 0x0032 => SendPINOverTheAir, extensions: '', ''
// attribute: 0x0101 / 0x0033 => RequirePINforRemoteOperation, extensions: '', ''
// attribute: 0x0101 / 0x0035 => ExpiringUserTimeout, extensions: '', ''
// attribute: 0x0102 / 0x0000 => Type, extensions: '', ''
// attribute: 0x0102 / 0x0001 => PhysicalClosedLimitLift, extensions: '', ''
// attribute: 0x0102 / 0x0002 => PhysicalClosedLimitTilt, extensions: '', ''
// attribute: 0x0102 / 0x0003 => CurrentPositionLift, extensions: '', ''
// attribute: 0x0102 / 0x0004 => CurrentPositionTilt, extensions: '', ''
// attribute: 0x0102 / 0x0005 => NumberOfActuationsLift, extensions: '', ''
// attribute: 0x0102 / 0x0006 => NumberOfActuationsTilt, extensions: '', ''
// attribute: 0x0102 / 0x0007 => ConfigStatus, extensions: '', ''
// attribute: 0x0102 / 0x0008 => CurrentPositionLiftPercentage, extensions: '', ''
// attribute: 0x0102 / 0x0009 => CurrentPositionTiltPercentage, extensions: '', ''
// attribute: 0x0102 / 0x000A => OperationalStatus, extensions: '', ''
// attribute: 0x0102 / 0x000B => TargetPositionLiftPercent100ths, extensions: '', ''
// attribute: 0x0102 / 0x000C => TargetPositionTiltPercent100ths, extensions: '', ''
// attribute: 0x0102 / 0x000D => EndProductType, extensions: '', ''
// attribute: 0x0102 / 0x000E => CurrentPositionLiftPercent100ths, extensions: '', ''
// attribute: 0x0102 / 0x000F => CurrentPositionTiltPercent100ths, extensions: '', ''
// attribute: 0x0102 / 0x0010 => InstalledOpenLimitLift, extensions: '', ''
// attribute: 0x0102 / 0x0011 => InstalledClosedLimitLift, extensions: '', ''
// attribute: 0x0102 / 0x0012 => InstalledOpenLimitTilt, extensions: '', ''
// attribute: 0x0102 / 0x0013 => InstalledClosedLimitTilt, extensions: '', ''
// attribute: 0x0102 / 0x0017 => Mode, extensions: '', ''
// attribute: 0x0102 / 0x001A => SafetyStatus, extensions: '', ''
// attribute: 0x0103 / 0x0001 => barrier moving state, extensions: '', ''
// attribute: 0x0103 / 0x0002 => barrier safety status, extensions: '', ''
// attribute: 0x0103 / 0x0003 => barrier capabilities, extensions: '', ''
// attribute: 0x0103 / 0x0004 => barrier open events, extensions: '', ''
// attribute: 0x0103 / 0x0005 => barrier close events, extensions: '', ''
// attribute: 0x0103 / 0x0006 => barrier command open events, extensions: '', ''
// attribute: 0x0103 / 0x0007 => barrier command close events, extensions: '', ''
// attribute: 0x0103 / 0x0008 => barrier open period, extensions: '', ''
// attribute: 0x0103 / 0x0009 => barrier close period, extensions: '', ''
// attribute: 0x0103 / 0x000A => barrier position, extensions: '', ''
// attribute: 0x0200 / 0x0000 => MaxPressure, extensions: '', ''
// attribute: 0x0200 / 0x0001 => MaxSpeed, extensions: '', ''
// attribute: 0x0200 / 0x0002 => MaxFlow, extensions: '', ''
// attribute: 0x0200 / 0x0003 => MinConstPressure, extensions: '', ''
// attribute: 0x0200 / 0x0004 => MaxConstPressure, extensions: '', ''
// attribute: 0x0200 / 0x0005 => MinCompPressure, extensions: '', ''
// attribute: 0x0200 / 0x0006 => MaxCompPressure, extensions: '', ''
// attribute: 0x0200 / 0x0007 => MinConstSpeed, extensions: '', ''
// attribute: 0x0200 / 0x0008 => MaxConstSpeed, extensions: '', ''
// attribute: 0x0200 / 0x0009 => MinConstFlow, extensions: '', ''
// attribute: 0x0200 / 0x000A => MaxConstFlow, extensions: '', ''
// attribute: 0x0200 / 0x000B => MinConstTemp, extensions: '', ''
// attribute: 0x0200 / 0x000C => MaxConstTemp, extensions: '', ''
// attribute: 0x0200 / 0x0010 => PumpStatus, extensions: '', ''
// attribute: 0x0200 / 0x0011 => EffectiveOperationMode, extensions: '', ''
// attribute: 0x0200 / 0x0012 => EffectiveControlMode, extensions: '', ''
// attribute: 0x0200 / 0x0013 => Capacity, extensions: '', ''
// attribute: 0x0200 / 0x0014 => Speed, extensions: '', ''
// attribute: 0x0200 / 0x0015 => LifetimeRunningHours, extensions: '', ''
// attribute: 0x0200 / 0x0016 => Power, extensions: '', ''
// attribute: 0x0200 / 0x0017 => LifetimeEnergyConsumed, extensions: '', ''
// attribute: 0x0200 / 0x0020 => OperationMode, extensions: '', ''
// attribute: 0x0200 / 0x0021 => ControlMode, extensions: '', ''
// attribute: 0x0201 / 0x0000 => LocalTemperature, extensions: '', ''
// attribute: 0x0201 / 0x0001 => OutdoorTemperature, extensions: '', ''
// attribute: 0x0201 / 0x0002 => Occupancy, extensions: '', ''
// attribute: 0x0201 / 0x0003 => AbsMinHeatSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0004 => AbsMaxHeatSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0005 => AbsMinCoolSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0006 => AbsMaxCoolSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0007 => PICoolingDemand, extensions: '', ''
// attribute: 0x0201 / 0x0008 => PIHeatingDemand, extensions: '', ''
// attribute: 0x0201 / 0x0009 => HVACSystemTypeConfiguration, extensions: '', ''
// attribute: 0x0201 / 0x0010 => LocalTemperatureCalibration, extensions: '', ''
// attribute: 0x0201 / 0x0011 => OccupiedCoolingSetpoint, extensions: '', ''
// attribute: 0x0201 / 0x0012 => OccupiedHeatingSetpoint, extensions: '', ''
// attribute: 0x0201 / 0x0013 => UnoccupiedCoolingSetpoint, extensions: '', ''
// attribute: 0x0201 / 0x0014 => UnoccupiedHeatingSetpoint, extensions: '', ''
// attribute: 0x0201 / 0x0015 => MinHeatSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0016 => MaxHeatSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0017 => MinCoolSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0018 => MaxCoolSetpointLimit, extensions: '', ''
// attribute: 0x0201 / 0x0019 => MinSetpointDeadBand, extensions: '', ''
// attribute: 0x0201 / 0x001A => RemoteSensing, extensions: '', ''
// attribute: 0x0201 / 0x001B => ControlSequenceOfOperation, extensions: '', ''
// attribute: 0x0201 / 0x001C => SystemMode, extensions: '', ''
// attribute: 0x0201 / 0x001E => ThermostatRunningMode, extensions: '', ''
// attribute: 0x0201 / 0x0020 => StartOfWeek, extensions: '', ''
// attribute: 0x0201 / 0x0021 => NumberOfWeeklyTransitions, extensions: '', ''
// attribute: 0x0201 / 0x0022 => NumberOfDailyTransitions, extensions: '', ''
// attribute: 0x0201 / 0x0023 => TemperatureSetpointHold, extensions: '', ''
// attribute: 0x0201 / 0x0024 => TemperatureSetpointHoldDuration, extensions: '', ''
// attribute: 0x0201 / 0x0025 => ThermostatProgrammingOperationMode, extensions: '', ''
// attribute: 0x0201 / 0x0029 => ThermostatRunningState, extensions: '', ''
// attribute: 0x0201 / 0x0030 => SetpointChangeSource, extensions: '', ''
// attribute: 0x0201 / 0x0031 => SetpointChangeAmount, extensions: '', ''
// attribute: 0x0201 / 0x0032 => SetpointChangeSourceTimestamp, extensions: '', ''
// attribute: 0x0201 / 0x0034 => OccupiedSetback, extensions: '', ''
// attribute: 0x0201 / 0x0035 => OccupiedSetbackMin, extensions: '', ''
// attribute: 0x0201 / 0x0036 => OccupiedSetbackMax, extensions: '', ''
// attribute: 0x0201 / 0x0037 => UnoccupiedSetback, extensions: '', ''
// attribute: 0x0201 / 0x0038 => UnoccupiedSetbackMin, extensions: '', ''
// attribute: 0x0201 / 0x0039 => UnoccupiedSetbackMax, extensions: '', ''
// attribute: 0x0201 / 0x003A => EmergencyHeatDelta, extensions: '', ''
// attribute: 0x0201 / 0x0040 => ACType, extensions: '', ''
// attribute: 0x0201 / 0x0041 => ACCapacity, extensions: '', ''
// attribute: 0x0201 / 0x0042 => ACRefrigerantType, extensions: '', ''
// attribute: 0x0201 / 0x0043 => ACCompressorType, extensions: '', ''
// attribute: 0x0201 / 0x0044 => ACErrorCode, extensions: '', ''
// attribute: 0x0201 / 0x0045 => ACLouverPosition, extensions: '', ''
// attribute: 0x0201 / 0x0046 => ACCoilTemperature, extensions: '', ''
// attribute: 0x0201 / 0x0047 => ACCapacityformat, extensions: '', ''
// attribute: 0x0202 / 0x0000 => fan mode, extensions: '', ''
// attribute: 0x0202 / 0x0001 => fan mode sequence, extensions: '', ''
// attribute: 0x0202 / 0x0002 => percent setting, extensions: '', ''
// attribute: 0x0202 / 0x0003 => percent current, extensions: '', ''
// attribute: 0x0202 / 0x0004 => speed max, extensions: '', ''
// attribute: 0x0202 / 0x0005 => speed setting, extensions: '', ''
// attribute: 0x0202 / 0x0006 => speed current, extensions: '', ''
// attribute: 0x0202 / 0x0007 => rock support, extensions: '', ''
// attribute: 0x0202 / 0x0008 => rock setting, extensions: '', ''
// attribute: 0x0202 / 0x0009 => wind support, extensions: '', ''
// attribute: 0x0202 / 0x000A => wind setting, extensions: '', ''
// attribute: 0x0204 / 0x0000 => temperature display mode, extensions: '', ''
// attribute: 0x0204 / 0x0001 => keypad lockout, extensions: '', ''
// attribute: 0x0204 / 0x0002 => schedule programming visibility, extensions: '', ''
// attribute: 0x0300 / 0x0000 => CurrentHue, extensions: '', ''
// attribute: 0x0300 / 0x0001 => CurrentSaturation, extensions: '', ''
// attribute: 0x0300 / 0x0002 => RemainingTime, extensions: '', ''
// attribute: 0x0300 / 0x0003 => CurrentX, extensions: '', ''
// attribute: 0x0300 / 0x0004 => CurrentY, extensions: '', ''
// attribute: 0x0300 / 0x0005 => DriftCompensation, extensions: '', ''
// attribute: 0x0300 / 0x0006 => CompensationText, extensions: '', ''
// attribute: 0x0300 / 0x0007 => ColorTemperatureMireds, extensions: '', ''
// attribute: 0x0300 / 0x0008 => ColorMode, extensions: '', ''
// attribute: 0x0300 / 0x000F => Options, extensions: '', ''
// attribute: 0x0300 / 0x0010 => NumberOfPrimaries, extensions: '', ''
// attribute: 0x0300 / 0x0011 => Primary1X, extensions: '', ''
// attribute: 0x0300 / 0x0012 => Primary1Y, extensions: '', ''
// attribute: 0x0300 / 0x0013 => Primary1Intensity, extensions: '', ''
// attribute: 0x0300 / 0x0015 => Primary2X, extensions: '', ''
// attribute: 0x0300 / 0x0016 => Primary2Y, extensions: '', ''
// attribute: 0x0300 / 0x0017 => Primary2Intensity, extensions: '', ''
// attribute: 0x0300 / 0x0019 => Primary3X, extensions: '', ''
// attribute: 0x0300 / 0x001A => Primary3Y, extensions: '', ''
// attribute: 0x0300 / 0x001B => Primary3Intensity, extensions: '', ''
// attribute: 0x0300 / 0x0020 => Primary4X, extensions: '', ''
// attribute: 0x0300 / 0x0021 => Primary4Y, extensions: '', ''
// attribute: 0x0300 / 0x0022 => Primary4Intensity, extensions: '', ''
// attribute: 0x0300 / 0x0024 => Primary5X, extensions: '', ''
// attribute: 0x0300 / 0x0025 => Primary5Y, extensions: '', ''
// attribute: 0x0300 / 0x0026 => Primary5Intensity, extensions: '', ''
// attribute: 0x0300 / 0x0028 => Primary6X, extensions: '', ''
// attribute: 0x0300 / 0x0029 => Primary6Y, extensions: '', ''
// attribute: 0x0300 / 0x002A => Primary6Intensity, extensions: '', ''
// attribute: 0x0300 / 0x0030 => WhitePointX, extensions: '', ''
// attribute: 0x0300 / 0x0031 => WhitePointY, extensions: '', ''
// attribute: 0x0300 / 0x0032 => ColorPointRX, extensions: '', ''
// attribute: 0x0300 / 0x0033 => ColorPointRY, extensions: '', ''
// attribute: 0x0300 / 0x0034 => ColorPointRIntensity, extensions: '', ''
// attribute: 0x0300 / 0x0036 => ColorPointGX, extensions: '', ''
// attribute: 0x0300 / 0x0037 => ColorPointGY, extensions: '', ''
// attribute: 0x0300 / 0x0038 => ColorPointGIntensity, extensions: '', ''
// attribute: 0x0300 / 0x003A => ColorPointBX, extensions: '', ''
// attribute: 0x0300 / 0x003B => ColorPointBY, extensions: '', ''
// attribute: 0x0300 / 0x003C => ColorPointBIntensity, extensions: '', ''
// attribute: 0x0300 / 0x4000 => EnhancedCurrentHue, extensions: '', ''
// attribute: 0x0300 / 0x4001 => EnhancedColorMode, extensions: '', ''
// attribute: 0x0300 / 0x4002 => ColorLoopActive, extensions: '', ''
// attribute: 0x0300 / 0x4003 => ColorLoopDirection, extensions: '', ''
// attribute: 0x0300 / 0x4004 => ColorLoopTime, extensions: '', ''
// attribute: 0x0300 / 0x4005 => ColorLoopStartEnhancedHue, extensions: '', ''
// attribute: 0x0300 / 0x4006 => ColorLoopStoredEnhancedHue, extensions: '', ''
// attribute: 0x0300 / 0x400A => ColorCapabilities, extensions: '', ''
// attribute: 0x0300 / 0x400B => ColorTempPhysicalMinMireds, extensions: '', ''
// attribute: 0x0300 / 0x400C => ColorTempPhysicalMaxMireds, extensions: '', ''
// attribute: 0x0300 / 0x400D => CoupleColorTempToLevelMinMireds, extensions: '', ''
// attribute: 0x0300 / 0x4010 => StartUpColorTemperatureMireds, extensions: '', ''
// attribute: 0x0301 / 0x0000 => PhysicalMinLevel, extensions: '', ''
// attribute: 0x0301 / 0x0001 => PhysicalMaxLevel, extensions: '', ''
// attribute: 0x0301 / 0x0002 => BallastStatus, extensions: '', ''
// attribute: 0x0301 / 0x0010 => MinLevel, extensions: '', ''
// attribute: 0x0301 / 0x0011 => MaxLevel, extensions: '', ''
// attribute: 0x0301 / 0x0014 => IntrinsicBalanceFactor, extensions: '', ''
// attribute: 0x0301 / 0x0015 => BallastFactorAdjustment, extensions: '', ''
// attribute: 0x0301 / 0x0020 => LampQuantity, extensions: '', ''
// attribute: 0x0301 / 0x0030 => LampType, extensions: '', ''
// attribute: 0x0301 / 0x0031 => LampManufacturer, extensions: '', ''
// attribute: 0x0301 / 0x0032 => LampRatedHours, extensions: '', ''
// attribute: 0x0301 / 0x0033 => LampBurnHours, extensions: '', ''
// attribute: 0x0301 / 0x0034 => LampAlarmMode, extensions: '', ''
// attribute: 0x0301 / 0x0035 => LampBurnHoursTripPoint, extensions: '', ''
// attribute: 0x0400 / 0x0000 => MeasuredValue, extensions: '', ''
// attribute: 0x0400 / 0x0001 => MinMeasuredValue, extensions: '', ''
// attribute: 0x0400 / 0x0002 => MaxMeasuredValue, extensions: '', ''
// attribute: 0x0400 / 0x0003 => Tolerance, extensions: '', ''
// attribute: 0x0400 / 0x0004 => LightSensorType, extensions: '', ''
// attribute: 0x0402 / 0x0000 => MeasuredValue, extensions: '', ''
// attribute: 0x0402 / 0x0001 => MinMeasuredValue, extensions: '', ''
// attribute: 0x0402 / 0x0002 => MaxMeasuredValue, extensions: '', ''
// attribute: 0x0402 / 0x0003 => Tolerance, extensions: '', ''
// attribute: 0x0403 / 0x0000 => MeasuredValue, extensions: '', ''
// attribute: 0x0403 / 0x0001 => MinMeasuredValue, extensions: '', ''
// attribute: 0x0403 / 0x0002 => MaxMeasuredValue, extensions: '', ''
// attribute: 0x0403 / 0x0003 => Tolerance, extensions: '', ''
// attribute: 0x0403 / 0x0010 => ScaledValue, extensions: '', ''
// attribute: 0x0403 / 0x0011 => MinScaledValue, extensions: '', ''
// attribute: 0x0403 / 0x0012 => MaxScaledValue, extensions: '', ''
// attribute: 0x0403 / 0x0013 => ScaledTolerance, extensions: '', ''
// attribute: 0x0403 / 0x0014 => Scale, extensions: '', ''
// attribute: 0x0404 / 0x0000 => MeasuredValue, extensions: '', ''
// attribute: 0x0404 / 0x0001 => MinMeasuredValue, extensions: '', ''
// attribute: 0x0404 / 0x0002 => MaxMeasuredValue, extensions: '', ''
// attribute: 0x0404 / 0x0003 => Tolerance, extensions: '', ''
// attribute: 0x0405 / 0x0000 => measured value, extensions: '', ''
// attribute: 0x0405 / 0x0001 => min measured value, extensions: '', ''
// attribute: 0x0405 / 0x0002 => max measured value, extensions: '', ''
// attribute: 0x0405 / 0x0003 => tolerance, extensions: '', ''
// attribute: 0x0406 / 0x0000 => occupancy, extensions: '', ''
// attribute: 0x0406 / 0x0001 => occupancy sensor type, extensions: '', ''
// attribute: 0x0406 / 0x0002 => occupancy sensor type bitmap, extensions: '', ''
// attribute: 0x0406 / 0x0010 => PIR occupied to unoccupied delay, extensions: '', ''
// attribute: 0x0406 / 0x0011 => PIR unoccupied to occupied delay, extensions: '', ''
// attribute: 0x0406 / 0x0012 => PIR unoccupied to occupied threshold, extensions: '', ''
// attribute: 0x0406 / 0x0020 => ultrasonic occupied to unoccupied delay, extensions: '', ''
// attribute: 0x0406 / 0x0021 => ultrasonic unoccupied to occupied delay, extensions: '', ''
// attribute: 0x0406 / 0x0022 => ultrasonic unoccupied to occupied threshold, extensions: '', ''
// attribute: 0x0406 / 0x0030 => physical contact occupied to unoccupied delay, extensions: '', ''
// attribute: 0x0406 / 0x0031 => physical contact unoccupied to occupied delay, extensions: '', ''
// attribute: 0x0406 / 0x0032 => physical contact unoccupied to occupied threshold, extensions: '', ''
// attribute: 0x0503 / 0x0000 => MACAddress, extensions: '', ''
// attribute: 0x0504 / 0x0000 => ChannelList, extensions: '', ''
// attribute: 0x0504 / 0x0001 => Lineup, extensions: '', ''
// attribute: 0x0504 / 0x0002 => CurrentChannel, extensions: '', ''
// attribute: 0x0505 / 0x0000 => TargetList, extensions: '', ''
// attribute: 0x0505 / 0x0001 => CurrentTarget, extensions: '', ''
// attribute: 0x0506 / 0x0000 => CurrentState, extensions: '', ''
// attribute: 0x0506 / 0x0001 => StartTime, extensions: '', ''
// attribute: 0x0506 / 0x0002 => Duration, extensions: '', ''
// attribute: 0x0506 / 0x0003 => SampledPosition, extensions: '', ''
// attribute: 0x0506 / 0x0004 => PlaybackSpeed, extensions: '', ''
// attribute: 0x0506 / 0x0005 => SeekRangeEnd, extensions: '', ''
// attribute: 0x0506 / 0x0006 => SeekRangeStart, extensions: '', ''
// attribute: 0x0507 / 0x0000 => InputList, extensions: '', ''
// attribute: 0x0507 / 0x0001 => CurrentInput, extensions: '', ''
// attribute: 0x050A / 0x0000 => AcceptHeader, extensions: '', ''
// attribute: 0x050A / 0x0001 => SupportedStreamingProtocols, extensions: '', ''
// attribute: 0x050B / 0x0000 => OutputList, extensions: '', ''
// attribute: 0x050B / 0x0001 => CurrentOutput, extensions: '', ''
// attribute: 0x050C / 0x0000 => CatalogList, extensions: '', ''
// attribute: 0x050C / 0x0001 => CurrentApp, extensions: '', ''
// attribute: 0x050D / 0x0000 => VendorName, extensions: '', ''
// attribute: 0x050D / 0x0001 => VendorID, extensions: '', ''
// attribute: 0x050D / 0x0002 => ApplicationName, extensions: '', ''
// attribute: 0x050D / 0x0003 => ProductID, extensions: '', ''
// attribute: 0x050D / 0x0004 => Application, extensions: '', ''
// attribute: 0x050D / 0x0005 => Status, extensions: '', ''
// attribute: 0x050D / 0x0006 => ApplicationVersion, extensions: '', ''
// attribute: 0x050D / 0x0007 => AllowedVendorList, extensions: '', ''
// attribute: 0x0B04 / 0x0000 => measurement type, extensions: '', ''
// attribute: 0x0B04 / 0x0100 => dc voltage, extensions: '', ''
// attribute: 0x0B04 / 0x0101 => dc voltage min, extensions: '', ''
// attribute: 0x0B04 / 0x0102 => dc voltage max, extensions: '', ''
// attribute: 0x0B04 / 0x0103 => dc current, extensions: '', ''
// attribute: 0x0B04 / 0x0104 => dc current min, extensions: '', ''
// attribute: 0x0B04 / 0x0105 => dc current max, extensions: '', ''
// attribute: 0x0B04 / 0x0106 => dc power, extensions: '', ''
// attribute: 0x0B04 / 0x0107 => dc power min, extensions: '', ''
// attribute: 0x0B04 / 0x0108 => dc power max, extensions: '', ''
// attribute: 0x0B04 / 0x0200 => dc voltage multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0201 => dc voltage divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0202 => dc current multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0203 => dc current divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0204 => dc power multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0205 => dc power divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0300 => ac frequency, extensions: '', ''
// attribute: 0x0B04 / 0x0301 => ac frequency min, extensions: '', ''
// attribute: 0x0B04 / 0x0302 => ac frequency max, extensions: '', ''
// attribute: 0x0B04 / 0x0303 => neutral current, extensions: '', ''
// attribute: 0x0B04 / 0x0304 => total active power, extensions: '', ''
// attribute: 0x0B04 / 0x0305 => total reactive power, extensions: '', ''
// attribute: 0x0B04 / 0x0306 => total apparent power, extensions: '', ''
// attribute: 0x0B04 / 0x0307 => measured 1st harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x0308 => measured 3rd harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x0309 => measured 5th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x030A => measured 7th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x030B => measured 9th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x030C => measured 11th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x030D => measured phase 1st harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x030E => measured phase 3rd harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x030F => measured phase 5th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x0310 => measured phase 7th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x0311 => measured phase 9th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x0312 => measured phase 11th harmonic current, extensions: '', ''
// attribute: 0x0B04 / 0x0400 => ac frequency multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0401 => ac frequency divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0402 => power multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0403 => power divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0404 => harmonic current multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0405 => phase harmonic current multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0500 => instantaneous voltage, extensions: '', ''
// attribute: 0x0B04 / 0x0501 => instantaneous line current, extensions: '', ''
// attribute: 0x0B04 / 0x0502 => instantaneous active current, extensions: '', ''
// attribute: 0x0B04 / 0x0503 => instantaneous reactive current, extensions: '', ''
// attribute: 0x0B04 / 0x0504 => instantaneous power, extensions: '', ''
// attribute: 0x0B04 / 0x0505 => rms voltage, extensions: '', ''
// attribute: 0x0B04 / 0x0506 => rms voltage min, extensions: '', ''
// attribute: 0x0B04 / 0x0507 => rms voltage max, extensions: '', ''
// attribute: 0x0B04 / 0x0508 => rms current, extensions: '', ''
// attribute: 0x0B04 / 0x0509 => rms current min, extensions: '', ''
// attribute: 0x0B04 / 0x050A => rms current max, extensions: '', ''
// attribute: 0x0B04 / 0x050B => active power, extensions: '', ''
// attribute: 0x0B04 / 0x050C => active power min, extensions: '', ''
// attribute: 0x0B04 / 0x050D => active power max, extensions: '', ''
// attribute: 0x0B04 / 0x050E => reactive power, extensions: '', ''
// attribute: 0x0B04 / 0x050F => apparent power, extensions: '', ''
// attribute: 0x0B04 / 0x0510 => power factor, extensions: '', ''
// attribute: 0x0B04 / 0x0511 => average rms voltage measurement period, extensions: '', ''
// attribute: 0x0B04 / 0x0513 => average rms under voltage counter, extensions: '', ''
// attribute: 0x0B04 / 0x0514 => rms extreme over voltage period, extensions: '', ''
// attribute: 0x0B04 / 0x0515 => rms extreme under voltage period, extensions: '', ''
// attribute: 0x0B04 / 0x0516 => rms voltage sag period, extensions: '', ''
// attribute: 0x0B04 / 0x0517 => rms voltage swell period, extensions: '', ''
// attribute: 0x0B04 / 0x0600 => ac voltage multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0601 => ac voltage divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0602 => ac current multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0603 => ac current divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0604 => ac power multiplier, extensions: '', ''
// attribute: 0x0B04 / 0x0605 => ac power divisor, extensions: '', ''
// attribute: 0x0B04 / 0x0700 => overload alarms mask, extensions: '', ''
// attribute: 0x0B04 / 0x0701 => voltage overload, extensions: '', ''
// attribute: 0x0B04 / 0x0702 => current overload, extensions: '', ''
// attribute: 0x0B04 / 0x0800 => ac overload alarms mask, extensions: '', ''
// attribute: 0x0B04 / 0x0801 => ac voltage overload, extensions: '', ''
// attribute: 0x0B04 / 0x0802 => ac current overload, extensions: '', ''
// attribute: 0x0B04 / 0x0803 => ac active power overload, extensions: '', ''
// attribute: 0x0B04 / 0x0804 => ac reactive power overload, extensions: '', ''
// attribute: 0x0B04 / 0x0805 => average rms over voltage, extensions: '', ''
// attribute: 0x0B04 / 0x0806 => average rms under voltage, extensions: '', ''
// attribute: 0x0B04 / 0x0807 => rms extreme over voltage, extensions: '', ''
// attribute: 0x0B04 / 0x0808 => rms extreme under voltage, extensions: '', ''
// attribute: 0x0B04 / 0x0809 => rms voltage sag, extensions: '', ''
// attribute: 0x0B04 / 0x080A => rms voltage swell, extensions: '', ''
// attribute: 0x0B04 / 0x0901 => line current phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0902 => active current phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0903 => reactive current phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0905 => rms voltage phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0906 => rms voltage min phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0907 => rms voltage max phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0908 => rms current phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0909 => rms current min phase b, extensions: '', ''
// attribute: 0x0B04 / 0x090A => rms current max phase b, extensions: '', ''
// attribute: 0x0B04 / 0x090B => active power phase b, extensions: '', ''
// attribute: 0x0B04 / 0x090C => active power min phase b, extensions: '', ''
// attribute: 0x0B04 / 0x090D => active power max phase b, extensions: '', ''
// attribute: 0x0B04 / 0x090E => reactive power phase b, extensions: '', ''
// attribute: 0x0B04 / 0x090F => apparent power phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0910 => power factor phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0911 => average rms voltage measurement period phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0912 => average rms over voltage counter phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0913 => average rms under voltage counter phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0914 => rms extreme over voltage period phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0915 => rms extreme under voltage period phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0916 => rms voltage sag period phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0917 => rms voltage swell period phase b, extensions: '', ''
// attribute: 0x0B04 / 0x0A01 => line current phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A02 => active current phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A03 => reactive current phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A05 => rms voltage phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A06 => rms voltage min phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A07 => rms voltage max phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A08 => rms current phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A09 => rms current min phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A0A => rms current max phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A0B => active power phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A0C => active power min phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A0D => active power max phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A0E => reactive power phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A0F => apparent power phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A10 => power factor phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A11 => average rms voltage measurement period phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A12 => average rms over voltage counter phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A13 => average rms under voltage counter phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A14 => rms extreme over voltage period phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A15 => rms extreme under voltage period phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A16 => rms voltage sag period phase c, extensions: '', ''
// attribute: 0x0B04 / 0x0A17 => rms voltage swell period phase c, extensions: '', ''
// attribute: 0x1046 / 0x0000 => IdleModeInterval, extensions: '', ''
// attribute: 0x1046 / 0x0001 => ActiveModeInterval, extensions: '', ''
// attribute: 0x1046 / 0x0002 => ActiveModeThreshold, extensions: '', ''
// attribute: 0x1046 / 0x0003 => ExpectedClients, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0000 => boolean, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0001 => bitmap8, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0002 => bitmap16, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0003 => bitmap32, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0004 => bitmap64, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0005 => int8u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0006 => int16u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0007 => int24u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0008 => int32u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0009 => int40u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x000A => int48u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x000B => int56u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x000C => int64u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x000D => int8s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x000E => int16s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x000F => int24s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0010 => int32s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0011 => int40s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0012 => int48s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0013 => int56s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0014 => int64s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0015 => enum8, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0016 => enum16, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0017 => float_single, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0018 => float_double, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0019 => octet_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x001A => list_int8u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x001B => list_octet_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x001C => list_struct_octet_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x001D => long_octet_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x001E => char_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x001F => long_char_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0020 => epoch_us, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0021 => epoch_s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0022 => vendor_id, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0023 => list_nullables_and_optionals_struct, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0024 => enum_attr, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0025 => struct_attr, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0026 => range_restricted_int8u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0027 => range_restricted_int8s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0028 => range_restricted_int16u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0029 => range_restricted_int16s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x002A => list_long_octet_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x002B => list_fabric_scoped, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0030 => timed_write_boolean, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0031 => general_error_boolean, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x0032 => cluster_error_boolean, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x00FF => unsupported, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4000 => nullable_boolean, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4001 => nullable_bitmap8, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4002 => nullable_bitmap16, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4003 => nullable_bitmap32, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4004 => nullable_bitmap64, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4005 => nullable_int8u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4006 => nullable_int16u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4007 => nullable_int24u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4008 => nullable_int32u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4009 => nullable_int40u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x400A => nullable_int48u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x400B => nullable_int56u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x400C => nullable_int64u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x400D => nullable_int8s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x400E => nullable_int16s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x400F => nullable_int24s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4010 => nullable_int32s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4011 => nullable_int40s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4012 => nullable_int48s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4013 => nullable_int56s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4014 => nullable_int64s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4015 => nullable_enum8, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4016 => nullable_enum16, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4017 => nullable_float_single, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4018 => nullable_float_double, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4019 => nullable_octet_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x401E => nullable_char_string, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4024 => nullable_enum_attr, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4025 => nullable_struct, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4026 => nullable_range_restricted_int8u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4027 => nullable_range_restricted_int8s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4028 => nullable_range_restricted_int16u, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x4029 => nullable_range_restricted_int16s, extensions: '', ''
// attribute: 0xFFF1FC05 / 0x402A => write_only_int8u, extensions: '', ''

-------------------- Events -----------------------
// event: 0x001F / 0x0000 => AccessControlEntryChanged, extensions: 'defGlob'
// event: 0x001F / 0x0001 => AccessControlExtensionChanged, extensions: 'defGlob'
// event: 0x0025 / 0x0000 => StateChanged, extensions: 'defGlob'
// event: 0x0025 / 0x0001 => ActionFailed, extensions: 'defGlob'
// event: 0x0028 / 0x0000 => StartUp, extensions: 'defGlob'
// event: 0x0028 / 0x0001 => ShutDown, extensions: 'defGlob'
// event: 0x0028 / 0x0002 => Leave, extensions: 'defGlob'
// event: 0x0028 / 0x0003 => ReachableChanged, extensions: 'defGlob'
// event: 0x002A / 0x0000 => StateTransition, extensions: 'defGlob'
// event: 0x002A / 0x0001 => VersionApplied, extensions: 'defGlob'
// event: 0x002A / 0x0002 => DownloadError, extensions: 'defGlob'
// event: 0x0033 / 0x0000 => HardwareFaultChange, extensions: 'defGlob'
// event: 0x0033 / 0x0001 => RadioFaultChange, extensions: 'defGlob'
// event: 0x0033 / 0x0002 => NetworkFaultChange, extensions: 'defGlob'
// event: 0x0033 / 0x0003 => BootReason, extensions: 'defGlob'
// event: 0x0034 / 0x0000 => SoftwareFault, extensions: 'defGlob'
// event: 0x0035 / 0x0000 => ConnectionStatus, extensions: 'defGlob'
// event: 0x0035 / 0x0001 => NetworkFaultChange, extensions: 'defGlob'
// event: 0x0036 / 0x0000 => Disconnection, extensions: 'defGlob'
// event: 0x0036 / 0x0001 => AssociationFailure, extensions: 'defGlob'
// event: 0x0036 / 0x0002 => ConnectionStatus, extensions: 'defGlob'
// event: 0x0039 / 0x0000 => StartUp, extensions: 'defGlob'
// event: 0x0039 / 0x0001 => ShutDown, extensions: 'defGlob'
// event: 0x0039 / 0x0002 => Leave, extensions: 'defGlob'
// event: 0x0039 / 0x0003 => ReachableChanged, extensions: 'defGlob'
// event: 0x003B / 0x0000 => SwitchLatched, extensions: 'defGlob'
// event: 0x003B / 0x0001 => InitialPress, extensions: 'defGlob'
// event: 0x003B / 0x0002 => LongPress, extensions: 'defGlob'
// event: 0x003B / 0x0003 => ShortRelease, extensions: 'defGlob'
// event: 0x003B / 0x0004 => LongRelease, extensions: 'defGlob'
// event: 0x003B / 0x0005 => MultiPressOngoing, extensions: 'defGlob'
// event: 0x003B / 0x0006 => MultiPressComplete, extensions: 'defGlob'
// event: 0x0045 / 0x0000 => StateChange, extensions: 'defGlob'
// event: 0x0101 / 0x0000 => DoorLockAlarm, extensions: 'defGlob'
// event: 0x0101 / 0x0001 => DoorStateChange, extensions: 'defGlob'
// event: 0x0101 / 0x0002 => LockOperation, extensions: 'defGlob'
// event: 0x0101 / 0x0003 => LockOperationError, extensions: 'defGlob'
// event: 0x0101 / 0x0004 => LockUserChange, extensions: 'defGlob'
// event: 0x0200 / 0x0000 => SupplyVoltageLow, extensions: 'defGlob'
// event: 0x0200 / 0x0001 => SupplyVoltageHigh, extensions: 'defGlob'
// event: 0x0200 / 0x0002 => PowerMissingPhase, extensions: 'defGlob'
// event: 0x0200 / 0x0003 => SystemPressureLow, extensions: 'defGlob'
// event: 0x0200 / 0x0004 => SystemPressureHigh, extensions: 'defGlob'
// event: 0x0200 / 0x0005 => DryRunning, extensions: 'defGlob'
// event: 0x0200 / 0x0006 => MotorTemperatureHigh, extensions: 'defGlob'
// event: 0x0200 / 0x0007 => PumpMotorFatalFailure, extensions: 'defGlob'
// event: 0x0200 / 0x0008 => ElectronicTemperatureHigh, extensions: 'defGlob'
// event: 0x0200 / 0x0009 => PumpBlocked, extensions: 'defGlob'
// event: 0x0200 / 0x000A => SensorFailure, extensions: 'defGlob'
// event: 0x0200 / 0x000B => ElectronicNonFatalFailure, extensions: 'defGlob'
// event: 0x0200 / 0x000C => ElectronicFatalFailure, extensions: 'defGlob'
// event: 0x0200 / 0x000D => GeneralFault, extensions: 'defGlob'
// event: 0x0200 / 0x000E => Leakage, extensions: 'defGlob'
// event: 0x0200 / 0x000F => AirDetection, extensions: 'defGlob'
// event: 0x0200 / 0x0010 => TurbineOperation, extensions: 'defGlob'
// event: 0xFFF1FC05 / 0x0001 => TestEvent, extensions: 'defGlob'
// event: 0xFFF1FC05 / 0x0002 => TestFabricScopedEvent, extensions: 'defGlob'

------------------- Device types -------------------
// device type: CHIP / 0x0000 => MA-all-clusters-app // extension: ''
// device type: CHIP / 0x000A => MA-doorlock // extension: ''
// device type: CHIP / 0x000B => MA-doorlockcontroller // extension: ''
// device type: CHIP / 0x000E => MA-aggregator // extension: ''
// device type: CHIP / 0x000F => MA-genericswitch // extension: ''
// device type: CHIP / 0x0011 => MA-powersource // extension: ''
// device type: CHIP / 0x0012 => MA-otarequestor // extension: ''
// device type: CHIP / 0x0013 => MA-bridgeddevice // extension: ''
// device type: CHIP / 0x0014 => MA-otaprovider // extension: ''
// device type: CHIP / 0x0015 => MA-contactsensor // extension: ''
// device type: CHIP / 0x0016 => MA-rootdevice // extension: ''
// device type: CHIP / 0x0022 => MA-speaker // extension: ''
// device type: CHIP / 0x0023 => MA-casting-videoplayer // extension: ''
// device type: CHIP / 0x0024 => MA-contentapp // extension: ''
// device type: CHIP / 0x0027 => MA-modeselect // extension: ''
// device type: CHIP / 0x0028 => MA-basic-videoplayer // extension: ''
// device type: CHIP / 0x0029 => MA-casting-videoclient // extension: ''
// device type: CHIP / 0x002A => MA-video-remotecontrol // extension: ''
// device type: CHIP / 0x002B => MA-fan // extension: ''
// device type: CHIP / 0x0100 => MA-onofflight // extension: ''
// device type: CHIP / 0x0101 => MA-dimmablelight // extension: ''
// device type: CHIP / 0x0103 => MA-onofflightswitch // extension: ''
// device type: CHIP / 0x0104 => MA-dimmerswitch // extension: ''
// device type: CHIP / 0x0105 => MA-colordimmerswitch // extension: ''
// device type: CHIP / 0x0106 => MA-lightsensor // extension: ''
// device type: CHIP / 0x0107 => MA-occupancysensor // extension: ''
// device type: CHIP / 0x010A => MA-onoffpluginunit // extension: ''
// device type: CHIP / 0x010B => MA-dimmablepluginunit // extension: ''
// device type: CHIP / 0x010C => MA-colortemperaturelight // extension: ''
// device type: CHIP / 0x010D => MA-extendedcolorlight // extension: ''
// device type: CHIP / 0x0202 => MA-windowcovering // extension: ''
// device type: CHIP / 0x0203 => MA-windowcoveringcontroller // extension: ''
// device type: CHIP / 0x0302 => MA-tempsensor // extension: ''
// device type: CHIP / 0x0303 => MA-pump // extension: ''
// device type: CHIP / 0x0304 => MA-pumpcontroller // extension: ''
// device type: CHIP / 0x0305 => MA-pressuresensor // extension: ''
// device type: CHIP / 0x0306 => MA-flowsensor // extension: ''
// device type: CHIP / 0x0307 => MA-humiditysensor // extension: ''
// device type: CHIP / 0x0840 => MA-controlbridge // extension: ''
// device type: CHIP / 0x0850 => MA-onoffsensor // extension: ''
// device type: CHIP / 0xF001 => MA-orphan // extension: ''
// device type: CHIP / 0xF002 => MA-secondary-network-commissioning // extension: ''
// device type: HA / 0x0000 => HA-onoff // extension: ''
// device type: HA / 0x0001 => HA-levelcontrol // extension: ''
// device type: HA / 0x0002 => HA-onnoffoutput // extension: ''
// device type: HA / 0x0003 => HA-levelcontrollableoutput // extension: ''
// device type: HA / 0x0004 => HA-sceneselector // extension: ''
// device type: HA / 0x0005 => HA-configurationtool // extension: ''
// device type: HA / 0x0006 => HA-remote // extension: ''
// device type: HA / 0x0007 => HA-combinedinterface // extension: ''
// device type: HA / 0x0008 => HA-rangeextender // extension: ''
// device type: HA / 0x0009 => HA-mpo // extension: ''
// device type: HA / 0x000A => HA-doorlock // extension: ''
// device type: HA / 0x000B => HA-doorlockcontroller // extension: ''
// device type: HA / 0x000C => HA-simplesensor // extension: ''
// device type: HA / 0x000D => HA-consumptionawarenessdevice // extension: ''
// device type: HA / 0x0050 => HA-homegatewayems // extension: ''
// device type: HA / 0x0051 => HA-smartplug // extension: ''
// device type: HA / 0x0052 => HA-whitegoods // extension: ''
// device type: HA / 0x0053 => HA-meterinterface // extension: ''
// device type: HA / 0x0100 => HA-onofflight // extension: ''
// device type: HA / 0x0101 => HA-light // extension: ''
// device type: HA / 0x0102 => HA-colordimmablelight // extension: ''
// device type: HA / 0x0103 => HA-onofflightswitch // extension: ''
// device type: HA / 0x0104 => HA-switch // extension: ''
// device type: HA / 0x0105 => HA-colordimmerswitch // extension: ''
// device type: HA / 0x0106 => HA-lightsensor // extension: ''
// device type: HA / 0x0107 => HA-occupancysensor // extension: ''
// device type: HA / 0x0200 => HA-shade // extension: ''
// device type: HA / 0x0201 => HA-shadecontroller // extension: ''
// device type: HA / 0x0202 => HA-windowcovering // extension: ''
// device type: HA / 0x0203 => HA-windowcoveringcontroller // extension: ''
// device type: HA / 0x0300 => HA-heatcool // extension: ''
// device type: HA / 0x0301 => HA-tstat // extension: ''
// device type: HA / 0x0301 => MA-thermostat // extension: ''
// device type: HA / 0x0302 => HA-tempsensor // extension: ''
// device type: HA / 0x0305 => HA-pressuresensor // extension: ''
// device type: HA / 0x0306 => HA-flowsensor // extension: ''
// device type: HA / 0x0400 => HA-ias400 // extension: ''
// device type: HA / 0x0401 => HA-ias401 // extension: ''
// device type: HA / 0x0402 => HA-ias402 // extension: ''
// device type: HA / 0x0403 => HA-ias403 // extension: ''
// device type: LO / 0x0100 => LO-onofflight // extension: ''
// device type: LO / 0x0101 => LO-dimmablelight // extension: ''
// device type: LO / 0x0102 => LO-colordimmablelight // extension: ''
// device type: LO / 0x0103 => LO-onofflightswitch // extension: ''
// device type: LO / 0x0104 => LO-dimmerswitch // extension: ''
// device type: LO / 0x0105 => LO-colordimmerswitch // extension: ''
// device type: LO / 0x0106 => LO-lightsensor // extension: ''
// device type: LO / 0x0107 => LO-occupancysensor // extension: ''
// device type: LO / 0x0108 => LO-onoffballast // extension: ''
// device type: LO / 0x0109 => LO-dimmableballast // extension: ''
// device type: LO / 0x010A => LO-onoffpluginunit // extension: ''
// device type: LO / 0x010B => LO-dimmablepluginunit // extension: ''
// device type: LO / 0x010C => LO-colortemperaturelight // extension: ''
// device type: LO / 0x010D => LO-extendedcolorlight // extension: ''
// device type: LO / 0x010E => LO-lightlevelsensor // extension: ''
// device type: LO / 0x0800 => LO-colorcontroller // extension: ''
// device type: LO / 0x0810 => LO-colorscenecontroller // extension: ''
// device type: LO / 0x0820 => LO-noncolorcontroller // extension: ''
// device type: LO / 0x0830 => LO-noncolorscenecontroller // extension: ''
// device type: LO / 0x0840 => LO-controlbridge // extension: ''
// device type: LO / 0x0850 => LO-onoffsensor // extension: ''
// device type: XCHIP / 0x0300 => MA-heatcool // extension: ''
// device type: ZLL / 0x0000 => ZLL-onofflight // extension: ''
// device type: ZLL / 0x0010 => ZLL-onoffpluginunit // extension: ''
// device type: ZLL / 0x0100 => ZLL-dimmablelight // extension: ''
// device type: ZLL / 0x0110 => ZLL-dimmablepluginunit // extension: ''
// device type: ZLL / 0x0200 => ZLL-colorlight // extension: ''
// device type: ZLL / 0x0210 => ZLL-extendedcolorlight // extension: ''
// device type: ZLL / 0x0220 => ZLL-colortemperaturelight // extension: ''
// device type: ZLL / 0x0800 => ZLL-colorremote // extension: ''
// device type: ZLL / 0x0810 => ZLL-colorsceneremote // extension: ''
// device type: ZLL / 0x0820 => ZLL-noncolorremote // extension: ''
// device type: ZLL / 0x0830 => ZLL-noncolorsceneremote // extension: ''
// device type: ZLL / 0x0840 => ZLL-controlbridge // extension: ''
// device type: ZLL / 0x0850 => ZLL-onoffsensor // extension: ''

-------------------- Test the implementedCommands extension.

IMPLEMENTED_COMMANDS><END

------ Test if extension true in context of all_user_clusters

IMPLEMENTED_COMMANDS2><END2

